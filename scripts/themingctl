#!/bin/bash
#    _   _                    _                  _   _ 
#   | |_| |__   ___ _ __ ___ (_)_ __   __ _  ___| |_| |
#   | __| '_ \ / _ \ '_ ` _ \| | '_ \ / _` |/ __| __| |
#   | |_| | | |  __/ | | | | | | | | | (_| | (__| |_| |
#    \__|_| |_|\___|_| |_| |_|_|_| |_|\__, |\___|\__|_|
#                                     |___/            
# by DRAGONO

##########################
### Configs files path ###
##########################
hyprland_config="$hyprPath/configs/hyprland/style.conf" #HYPRLAND_CONFIG
waybar_config="$hyprPath/configs/waybar/configurations" #WAYBAR_CONFIG
hyprlock_config="$hyprPath/hyprlock.conf" #HYPRLOCK_CONFIG
wofi_config="$hyprPath/configs/wofi/style.css" #WOFI_CONFIG
dunst_config="$hyprPath/configs/dunst/dunstrc" #DUNST_CONFIG
kitty_config="$hyprPath/configs/kitty/kitty.conf" #KITTY_CONFIG
########## DONE ##########

# func : show_help
# desc : will display to the user how to use themingctl
# outp : The help message/usage of the script
# rtrn : 0
show_help()
{
	echo
    echo "Usage: $0 [option]" 
    echo "Options:"
	echo "     _______                                                                 "
	echo "   _/ Setup \_______________________________________________________________ "
	echo "  | --set-hyprland-config [path/to/config/file]                             |"
	echo "  | --set-waybar-config-file [path/to/config/file]                          |"
	echo "  | --set-hyprlock-config-file [path/to/config/file]                        |"
	echo "  | --set-wofi-config-file [path/to/config/file]                            |"
	echo "  | --set-dunst-config-file [path/to/config/file]                           |"
	echo "  | --set-kitty-config-file [path/to/config/file]                           |"
	echo "  |=========================================================================|"
	echo "  | --get-hyprland-config                                                   |"
	echo "  | --get-waybar-config-file                                                |"
	echo "  | --get-hyprlock-config-file                                              |"
	echo "  | --get-wofi-config-file                                                  |"
	echo "  | --get-dunst-config-file                                                 |"
	echo "  | --get-kitty-config-file                                                 |"
	echo "  | --get-themingctl-configs                                                |"
	echo "  |_________________________________________________________________________|"
	echo
	echo "     _________                                                               "
	echo "   _/ General \_____________________________________________________________ "
    echo "  | --auto-theming [path/to/wallpaper]                                      |"
    echo "  | --save-theme [save/at/themeName]                                        |"
    echo "  | --load-theme [path/to/theme/folder]                                     |"
	echo "  |=========================================================================|"
	echo "  | --set-global-primary-color [hexvalue]                                   |"
	echo "  | --set-global-primary-color-gui                                          |"
	echo "  | --set-global-secondary-color [hexvalue]                                 |"
	echo "  | --set-global-secondary-color-gui                                        |"
	echo "  | --set-global-font [font]                                                |"
	echo "  | --set-global-border-radius [int]                        NOT IMPLEMENTED |"
	echo "  | --set-outside-gaps [int]                                                |"
	echo "  | --set-inside-gaps [int]                                                 |"
	echo "  | --set-border-width [int]                                NOT IMPLEMENTED |"
	echo "  | --pick-color-from-menu                                                  |"
	echo "  | --pick-color-from-monitor                                               |"
	echo "  |=========================================================================|"
	echo "  | --get-outside-gaps                                                      |"
	echo "  | --get-inside-gaps                                                       |"
    echo "  |_________________________________________________________________________|"
	echo
	echo "     __________                                                              "
	echo "   _/ Hyprland \____________________________________________________________ "
    echo "  | --set-app-focused-color [hexvalue]                                      |"
    echo "  | --set-app-unfocused-color [hexvalue]                                    |"
	echo "  | --set-app-focused-opacity [range{0-1.0}]                                |"
	echo "  | --set-app-unfocused-opacity [range{0-1.0}]                              |"
	echo "  | --set-app-focused-border-opacity [range{0-1.0}]                         |"
	echo "  | --set-app-unfocused-border-opacity [range{0-1.0}]                       |"
	echo "  | --set-app-border-radius [int]                                           |"
	echo "  | --set-app-border-width [int]                                            |"
	echo "  |=========================================================================|"
  	echo "  | --get-app-focused-color                                                 |"
    echo "  | --get-app-unfocused-color                                               |"
	echo "  | --get-app-focused-opacity                                               |"
	echo "  | --get-app-unfocused-opacity                                             |"
	echo "  | --get-app-focused-border-opacity                                        |"
	echo "  | --get-app-unfocused-border-opacity                                      |"
	echo "  | --get-app-border-radius                                                 |"
	echo "  | --get-app-border-width                                                  |"
    echo "  |_________________________________________________________________________|"
	echo
	echo "     ________                                                                "
	echo "   _/ Waybar \______________________________________________________________ "
    echo "  | --set-waybar-focused-color [hexvalue]                                   |"
    echo "  | --set-waybar-unfocused-color [hexvalue]                                 |"
	echo "  | --set-waybar-focused-opacity [range{0-1.0}]                             |"
	echo "  | --set-waybar-unfocused-opacity [range{0-1.0}]                           |"
	echo "  | --set-waybar-focused-border-opacity [range{0-1.0}]      NOT IMPLEMENTED |"
	echo "  | --set-waybar-unfocused-border-opacity [range{0-1.0}]    NOT IMPLEMENTED |"
	echo "  | --set-waybar-position [top|right|bottom|left]           NOT IMPLEMENTED |"
	echo "  | --set-waybar-border-radius [int]                                        |"
	echo "  | --set-waybar-border-width [int]                                         |"
	echo "  | --set-waybar-font [font]                                                |"
	echo "  | --set-waybar-font-color [hexvalue]                      NOT IMPLEMENTED |"
	echo "  | --toggle-waybar-island-mode                             NOT IMPLEMENTED |"
	echo "  | --toggle-waybar-magnet-mode                             NOT IMPLEMENTED |"
	echo "  | --toggle-waybar-isles-mode                              NOT IMPLEMENTED |"
	echo "  |=========================================================================|"
    echo "  | --get-waybar-focused-color                                              |"
    echo "  | --get-waybar-unfocused-color                                            |"
	echo "  | --get-waybar-focused-opacity                                            |"
	echo "  | --get-waybar-unfocused-opacity                                          |"
	echo "  | --get-waybar-focused-border-opacity                                     |"
	echo "  | --get-waybar-unfocused-border-opacity                                   |"
	echo "  | --get-waybar-position                                                   |"
	echo "  | --get-waybar-border-radius                                              |"
	echo "  | --get-waybar-border-width                                               |"
	echo "  | --get-waybar-font                                                       |"
	echo "  | --get-waybar-font-color                                                 |"
	echo "  | --get-waybar-mode                                                       |"
	echo "  |_________________________________________________________________________|"
    echo
	echo "     ___________                                                             "
	echo "   _/ Wallpaper \___________________________________________________________ "
    echo "  | --set-desktop-wallpaper [path/to/wallpaper]                             |"
	echo "  |=========================================================================|"
    echo "  | --get-desktop-wallpaper                                                 |"
    echo "  |_________________________________________________________________________|"
	echo
	echo "     __________                                                              "
	echo "   _/ Hyprlock \____________________________________________________________ "
    echo "  | --set-lockscreen-wallpaper [path/to/wallpaper]                          |"
	echo "  | --set-lockscreen-scale [scale]                          NOT IMPLEMENTED |"
	echo "  | --set-lockscreen-user-avatar [path/to/avatar]           NOT IMPLEMENTED |"
	echo "  | --set-lockscreen-font [font]                                            |"
	echo "  |=========================================================================|"
    echo "  | --get-lockscreen-wallpaper                                              |"
	echo "  | --get-lockscreen-scale                                  NOT IMPLEMENTED |"
	echo "  | --get-lockscreenuser-avatar                             NOT IMPLEMENTED |"
	echo "  | --get-lockscreen-font                                                   |"
    echo "  |_________________________________________________________________________|"
	echo
	echo "     ______                                                                  "
	echo "   _/ Wofi \________________________________________________________________ "
    echo "  | --set-wofi-primary-color [hexvalue]                                     |"
    echo "  | --set-wofi-secondary-color [hexvalue]                                   |"
	echo "  | --set-wofi-border-radius [int]                          NOT IMPLEMENTED |"
	echo "  | --set-wofi-opacity [range{0-1.0}]                       NOT IMPLEMENTED |"
	echo "  | --set-wofi-border-width [int]                           NOT IMPLEMENTED |"
	echo "  | --set-wofi-font [font]                                                  |"
	echo "  |=========================================================================|"
    echo "  | --get-wofi-primary-color                                                |"
    echo "  | --get-wofi-secondary-color                                              |"
	echo "  | --get-wofi-border-radius                                NOT IMPLEMENTED |"
	echo "  | --get-wofi-opacity                                      NOT IMPLEMENTED |"
	echo "  | --get-wofi-border-width                                 NOT IMPLEMENTED |"
	echo "  | --get-wofi-font                                                         |"
	echo "  |_________________________________________________________________________|"
    echo
	echo "     _______                                                                 "
	echo "   _/ Dunst \_______________________________________________________________ "
    echo "  | --set-dunst-primary-color [hexvalue]                                    |"
    echo "  | --set-dunst-secondary-color [hexvalue]                                  |"
    echo "  | --set-dunst-border-color [hexvalue]                                     |"
	echo "  | --set-dunst-border-radius [int]                                         |"
	echo "  | --set-dunst-border-width [int]                                          |"
	echo "  | --set-dunst-font                                                        |"
	echo "  |=========================================================================|"
    echo "  | --get-dunst-primary-color                                               |"  
    echo "  | --get-dunst-secondary-color                                             |"
    echo "  | --set-dunst-border-color                                                |"
	echo "  | --get-dunst-border-radius                                               |"
	echo "  | --get-dunst-border-width                                                |"
	echo "  | --get-dunst-font                                                        |"
	echo "  |_________________________________________________________________________|"
	echo
	echo "     _______                                                                 "
	echo "   _/ Kitty \_______________________________________________________________ "
	echo "  | --set-kitty-font-color [hexvalue]                                       |"
	echo "  | --set-kitty-background-color [hexvalue]                                 |"
	echo "  | --set-kitty-cursor-color [hexvalue]                                     |"
	echo "  | --set-kitty-cursor-text-color [hexvalue]                                |"
	echo "  | --set-kitty-url-color [hexvalue]                                        |"
	echo "  | --set-kitty-color[range{0-7}] [hexvalue]                                |"
	echo "  | --set-kitty-opacity [range{0-1.0}]                                      |"
	echo "  | --set-kitty-font [font]                                                 |"
	echo "  | --set-kitty-font-size [int]                                             |"
	echo "  | --set-kitty-colors-from-wallpaper [path/to/wallpaper]                   |"
	echo "  | ========================================================================|"
	echo "  | --get-kitty-font-color                                                  |"
	echo "  | --get-kitty-background-color                                            |"
	echo "  | --get-kitty-cursor-color                                                |"
	echo "  | --get-kitty-cursor-text-color                                           |"
	echo "  | --get-kitty-url-color                                                   |"
	echo "  | --get-kitty-color[range{0-7}]                                           |"
	echo "  | --get-kitty-colors-all                                                  |"
	echo "  | --get-kitty-opacity                                                     |"
	echo "  | --get-kitty-font                                                        |"
	echo "  | --get-kitty-font-size                                                   |"
	echo "  |_________________________________________________________________________|"
	echo
    echo "   -h, --help   Show help."
    return 0
}











# =========================
# === UTILITY FUNCTIONS ===
# =========================

# func : report_error
# desc : will echo a given message to stderr
# arg1 : the error type : fatal, error, ... This is just and indication and do nothing much.
# arg2 : title of the error, basically where the error occured
# arg3 : the error message
# outp : An error message to stderr
# rtrn : 0
report_error()
{
    local error_type="$1"
    local error_title="$2"
    local error_message="$3"
    >&2 echo "[${error_type}]: ${error_title}: ${error_message}"
    return 0
}



# func : arguments_check
# desc : will check if enough arguments are being given to an option
# arg1 : the option being checked
# arg2 : required number of arguments
# arg3 : current number of arguments
# outp : an error message if there is not enough arguments
# rtrn : 0 if no error, else 1
arguments_check()
{
    local checked_option="$1"
    local required_arg_number="$2"
    local current_arg_number="$3"
    if ((current_arg_number < required_arg_number)); then
        report_error "FATAL" "$checked_option" "Not enough arguments."
        return 1
    fi
    return 0
}



# func : is_file_valid
# desc : will test if the given file is valid or not
# arg1 : path to the file
# outp : none
# rtrn : 0 if no error, else 1
is_file_valid()
{
    local file="$1"
    if [ ! -f "$file" ]; then
		report_error "ERROR" "is_file_valid" "$file is not a valid file."
		return 1
    fi
    return 0
}



# func : is_hexvalue_valid
# desc : will test if the given hexadecimal color is a valid color or not
# arg1 : hexadecimal color to test
# outp : none
# rtrn : 0 if no error, else 1
is_hexvalue_valid()
{
    local hexValue="$1"    
    if ! echo "$hexValue" | grep -qE '^[0-9a-fA-F]{6}$'; then
		report_error "ERROR" "is_hexvalue_valid" "'$hexValue' is not a valid hexadecimal color."
		return 1
    fi
    return 0
}



# func : is_range_valid
# desc : will test if the given value is between 0 and 1. Accept floating point numbers
# arg1 : value to test
# outp : none
# rtrn : 0 if no error, else 1
is_range_valid()
{
	local value="$1"
	if ! echo "$value" | awk '{exit !($value >= 0 && $value <= 1)}'; then
		report_error "ERROR" "is_range_valid" "'$value' is not a valid range."
		return 1
	fi
	return 0
}



# func : range_to_hexadecimal
# desc : transform a range (between 0 and 1.0) into an hexadecimal value between 0 and 255
# arg1 : range to transform
# outp : none
# rtrn : 0 if no error, else 1
range_to_hexadecimal()
{
	local range="$1"
	local hexValue

	if ! is_range_valid $range; then
		report_error "ERROR" "range_to_hexadecimal" "'$range' is not a valid range."
		return 1
	fi
	
	hexValue=$(awk "BEGIN {print 255*$range}")
	hexValue=$(echo $hexValue | sed "s/\..*//" ) # Removing eventual .xx
	hexValue=$(printf '%02x' "$hexValue") # Convert to hexadecimal
	echo "$hexValue"
}



# func : hexadecimal_to_range
# desc : transform a hexadecimal value (between 00 and ff) into a range (between 0 and 1.0)
# arg1 : hexadecimal value to transform
# outp : none
# rtrn : 0 if no error, else 1
hexadecimal_to_range()
{
    local hexValue="$1"    
    if ! echo "$hexValue" | grep -qE '^[0-9a-fA-F]{2}$'; then
		report_error "ERROR" "is_hexvalue_valid" "'$hexValue' is not a valid hexadecimal color."
		return 1
    fi
	# Convert hex to decimal
	range=$(( 16#$hexValue ))
	# Normalize to range [0, 1.0]
	range=$(awk "BEGIN {print $range / 255}")
	echo "$range"
}



# func : is_valid_int
# desc : will test if the given value is an int or not
# arg1 : given value to test
# outp : none
# rtrn : 0 if no error, else 1
is_valid_int()
{
    local value="$1"
    if [[ -n ${value//[0-9]/} ]]; then
        report_error "ERROR" "is_int_valid" "'$value' is not a valid integer."
        return 1 
    fi
    return 0
}



# func : push_waybar_refresh
# desc : will turn refresh from no to yes, saying to the waybar daemon that a style refresh is needed
# outp : none
# rtrn : 0 if no error, else 1
push_waybar_refresh()
{
	sed -i "s/^refresh=no/refresh=yes/" $waybar_config
	return 0
}



# func : push_waybar_reload
# desc : will turn reload from no to yes, saying to the waybar daemon that a waybar reloading is required
# outp : none
# rtrn : 0 if no error, else 1
push_waybar_reload()
{
	sed -i "s/^reload=no/reload=yes/" $waybar_config
	return 0
}



valid_rgb()
{
    local rgbvalue="$1"
    local numbers
    local digits
    
    # Do we have 3 values ?
    numbers=$(echo "$rgbvalue" | sed "s/,/ /g" | wc -w)
    if [ ! "$numbers" -eq 3 ]; then
			report_error "ERROR" "valid_rgb" "The RGB value is invalid."
			return 1
    fi
    
    for value in ${rgbvalue//,/ }; do
        digits=${#value}
        if [ "$digits" -gt 3 ]; then
			report_error "ERROR" "valid_rgb" "The RGB value is invalid."
			return 1
        fi
        
		if ((value < 0 || value > 255)); then
			report_error "ERROR" "valid_rgb" "The RGB value is invalid."
			return 1
		fi
    done
    
    # Valid number
    return 0
}



rgb_to_hex()
{
    local rgbvalue="$1"
    if ! valid_rgb "$rgbvalue"; then
		report_error "ERROR" "rgb_to_hex" "The RGB value is invalid."
		return 1
    fi
    
    # Conversion
    r=$(echo "$rgbvalue" | cut -d, -f1)
    g=$(echo "$rgbvalue" | cut -d, -f2)
    b=$(echo "$rgbvalue" | cut -d, -f3)
    printf '#%02x%02x%02x\n' "$r" "$g" "$b"
}





# ============================
# === FUNCTIONAL FUNCTIONS ===
# ============================

# func : auto_theming
# desc : will apply a coherent theme over the whole system following new wallpaper colors
# arg1 : path to new wallpaper
# outp : none
# rtrn : 0 if no error, else 1
auto_theming()
{
	local wallpaper="$1"
	local primary
	local secondary
	if ! identify $wallpaper; then 
		report_error "ERROR" "auto_theming" "'$wallpaper' is not a valid wallpaper."
		return 1
	fi

	# Updating wal colors cache
	if ! wal -i $wallpaper; then
		report_error "ERROR" "auto_theming" "Could not update wal colors cache."
		return 1
	fi

	# Retreiving primary color
	primary=$(sed -n "8p" $HOME/.cache/wal/colors | sed "s/#//")
	secondary=$(sed -n "2p" $HOME/.cache/wal/colors | sed "s/#//")


	# Wallpapers
	launch_option 1 set_desktop_wallpaper $wallpaper || return 1
	launch_option 6 set_option_value $hyprlock_config "path" "path = |.*| #lockscreen_wallpaper" '|' $wallpaper image  || return 1

	# Global colors from differents apps
	set_global_primary_color $primary
	set_global_secondary_color $secondary

	# Kitty
	launch_option 1 set_kitty_colors_from_wallpaper $wallpaper || return 1

	# Avatar style
	$hyprPath/scripts/userctl --reload-style

	# Done
	return 0
}



save_theme()
{
	local folderPath="$1"
	if ! mkdir $folderPath; then
		report_error "ERROR" "save_theme" "Could not create theme folder at '$folderPath'."
		return 1
	fi
	folderPath=$(realpath $folderPath)

	# Creating an instruction list to load later
	# Hyprland
	echo "\$hyprPath/scripts/themingctl --set-app-focused-color "$(launch_option 4 get_option_value $hyprland_config "col.active_border" "col.active_border = rgba(|.*|..)" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-app-unfocused-color "$(launch_option 4 get_option_value $hyprland_config "col.inactive_border" "col.inactive_border = rgba(|.*|..)" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-app-focused-opacity "$(launch_option 4 get_option_value $hyprland_config "active_opacity" "active_opacity = |.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-app-unfocused-opacity "$(launch_option 4 get_option_value $hyprland_config "inactive_opacity" "inactive_opacity = |.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-app-focused-border-opacity "$(hexadecimal_to_range $(launch_option 4 get_option_value $hyprland_config "col.active_border" "col.active_border = rgba(......|.*|)" '|')) >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-app-unfocused-border-opacity "$(hexadecimal_to_range $(launch_option 4 get_option_value $hyprland_config "col.inactive_border" "col.inactive_border = rgba(......|.*|)" '|')) >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-app-border-radius "$(launch_option 4 get_option_value $hyprland_config "rounding" "rounding = |.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-app-border-width "$(launch_option 4 get_option_value $hyprland_config "border_size" "border_size = |.*|" '|') >> $folderPath/config.theme
    # Waybar
	echo "\$hyprPath/scripts/themingctl --set-waybar-focused-color "$(launch_option 4 get_option_value $waybar_config "focused_color" "focused_color=#|.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-waybar-unfocused-color "$(launch_option 4 get_option_value $waybar_config "unfocused_color" "unfocused_color=#|.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-waybar-focused-opacity "$(launch_option 4 get_option_value $waybar_config "focused_opacity" "focused_opacity=|.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-waybar-unfocused-opacity "$(launch_option 4 get_option_value $waybar_config "unfocused_opacity" "unfocused_opacity=|.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-waybar-focused-border-opacity "$(launch_option 4 get_option_value $waybar_config "focused_border_opacity" "focused_border_opacity=|.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-waybar-unfocused-border-opacity "$(launch_option 4 get_option_value $waybar_config "unfocused_border_opacity" "unfocused_border_opacity=|.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-waybar-position "$(launch_option 4 get_option_value $waybar_config "position" "position=|.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-waybar-border-radius "$(launch_option 4 get_option_value $waybar_config "border_radius" "border_radius=|.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-waybar-border-width "$(launch_option 4 get_option_value $waybar_config "border_width" "border_width=|.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-waybar-font \""$(launch_option 4 get_option_value $waybar_config "font_family" "font_family=|.*|" '|')\" >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-waybar-font-color "$(launch_option 4 get_option_value $waybar_config "font_color" "font_color=#|.*|" '|') >> $folderPath/config.theme
	# Desktop
	cp $(launch_option 0 get_desktop_wallpaper) $folderPath/desktop_wallpaper
	# Hyprlock
	cp $(launch_option 0 get_lockscreen_wallpaper) $folderPath/lockscreen_wallpaper
	echo "\$hyprPath/scripts/themingctl --set-lockscreen-font \""$(launch_option 4 get_option_value $hyprlock_config "font_family" "font_family = |.*|" '|')\" >> $folderPath/config.theme
	# Wofi
	echo "\$hyprPath/scripts/themingctl --set-wofi-primary-color "$(launch_option 4 get_option_value $wofi_config "@define-color primary" "@define-color primary #|.*|;" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-wofi-secondary-color "$(launch_option 4 get_option_value $wofi_config "@define-color secondary" "@define-color secondary #|.*|;" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-wofi-font \""$(launch_option 4 get_option_value $wofi_config "font:" "font:|.*|;" '|')\" >> $folderPath/config.theme
	# Dunst
	echo "\$hyprPath/scripts/themingctl --set-dunst-primary-color "$(launch_option 4 get_option_value $dunst_config "foreground" "foreground = \"#|.*|\"" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-dunst-secondary-color "$(launch_option 4 get_option_value $dunst_config "background" "background = \"#|.*|\"" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-dunst-border-color "$(launch_option 4 get_option_value $dunst_config "frame_color" "frame_color = \"#|.*|\"" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-dunst-border-radius "$(launch_option 4 get_option_value $dunst_config "corner_radius" "corner_radius = |.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-dunst-border-width "$(launch_option 4 get_option_value $dunst_config "frame_width" "frame_width = |.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-dunst-font \""$(launch_option 4 get_option_value $dunst_config "font" "font = |.*|" '|')\" >> $folderPath/config.theme
	# Kitty
	echo "\$hyprPath/scripts/themingctl --set-kitty-font-color "$(launch_option 4 get_option_value $kitty_config "foreground" "foreground #|.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-kitty-background-color "$(launch_option 4 get_option_value $kitty_config "background " "background #|.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-kitty-cursor-color "$(launch_option 4 get_option_value $kitty_config "cursor " "cursor #|.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-kitty-cursor-text-color "$(launch_option 4 get_option_value $kitty_config "cursor_text_color" "cursor_text_color #|.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-kitty-url-color "$(launch_option 4 get_option_value $kitty_config "url_color" "url_color #|.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-kitty-color0 "$(launch_option 4 get_option_value $kitty_config "color0" "color0 #|.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-kitty-color1 "$(launch_option 4 get_option_value $kitty_config "color1 " "color1 #|.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-kitty-color2 "$(launch_option 4 get_option_value $kitty_config "color2" "color2 #|.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-kitty-color3 "$(launch_option 4 get_option_value $kitty_config "color3" "color3 #|.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-kitty-color4 "$(launch_option 4 get_option_value $kitty_config "color4" "color4 #|.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-kitty-color5 "$(launch_option 4 get_option_value $kitty_config "color5" "color5 #|.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-kitty-color6 "$(launch_option 4 get_option_value $kitty_config "color6" "color6 #|.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-kitty-color7 "$(launch_option 4 get_option_value $kitty_config "color7" "color7 #|.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-kitty-opacity "$(launch_option 4 get_option_value $kitty_config "background_opacity" "background_opacity |.*|" '|') >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-kitty-font \""$(launch_option 4 get_option_value $kitty_config "font_family" "font_family |.*|" '|')\" >> $folderPath/config.theme
	echo "\$hyprPath/scripts/themingctl --set-kitty-font-size "$(launch_option 4 get_option_value $kitty_config "font_size" "font_size |.*|" '|') >> $folderPath/config.theme
	# Done

	return 0
}



load_theme()
{
	local themeFolder="$1"
	local themeConfig
	if [ ! -d $themeFolder ]; then
		report_error "ERROR" "load_theme" "'$themeFolder' is not a valid theme."
		return 1
	fi
	if [ ! -f "$themeFolder/config.theme" ]; then
		report_error "ERROR" "load_theme" "No config file in the theme folder."
		return 1
	fi
	# Specify the file containing the commands
	themeConfig="$themeFolder/config.theme"
	# Loading wallpapers
	launch_option 1 set_lockscreen_wallpaper $themeFolder/lockscreen_wallpaper
	swww img $themeFolder/desktop_wallpaper
	# Read the file line by line
	while IFS= read -r line; do
		# Execute the command
		if ! eval "$line"; then
			report_error "ERROR" "load_theme" "Could not execute '$line'."
			return 1
		fi
	done < "$themeConfig"
	# Reloading waybars
	push_waybar_refresh
	push_waybar_reload
	# Done
	return 0
}



set_global_primary_color()
{
	local primary="$1"
	if ! is_hexvalue_valid $primary; then
		report_error "ERROR" "set_global_primary_value" "'$primary' is not a valid hexadecimal value."
		return 1
	fi
	
	launch_option 6 set_option_value $hyprland_config "col.active_border" "col.active_border = rgba(|.*|..)" '|' $primary hexadecimal || return 1
	launch_option 6 set_option_value $waybar_config "focused_color" "focused_color=#|.*|" '|' $primary hexadecimal  || return 1; push_waybar_refresh
	launch_option 6 set_option_value $wofi_config "@define-color primary" "@define-color primary #|.*|;" '|' $primary hexadecimal  || return 1
	launch_option 6 set_option_value $dunst_config "foreground" "foreground = \"#|.*|\"" '|' $primary hexadecimal || return 1
	launch_option 6 set_option_value $dunst_config "frame_color" "frame_color = \"#|.*|\"" '|' $primary hexadecimal || return 1
	pkill dunst; dunst -conf $dunst_config & # Restarting dunst for the theme to apply
	return 0
}



set_global_secondary_color()
{
	local secondary="$1"
	if ! is_hexvalue_valid $secondary; then
		report_error "ERROR" "set_global_secondary_color" "'$secondary' is not a valid hexadecimal value."
		return 1
	fi
	
	launch_option 6 set_option_value $hyprland_config "col.inactive_border" "col.inactive_border = rgba(|.*|..)" '|' $secondary hexadecimal || return 1
	launch_option 6 set_option_value $waybar_config "unfocused_color" "unfocused_color=#|.*|" '|' $secondary hexadecimal  || return 1; push_waybar_refresh
	launch_option 6 set_option_value $wofi_config "@define-color secondary" "@define-color secondary #|.*|;" '|' $secondary hexadecimal  || return 1
	launch_option 6 set_option_value $dunst_config "background" "background = \"#|.*|\"" '|' $secondary hexadecimal || return 1
	pkill dunst; dunst -conf $dunst_config & # Restarting dunst for the theme to apply
	return 0
}



set_global_primary_color_gui()
{
	if ! set_global_primary_color $(pick_color_from_menu | sed "s/#//"); then
		report_error "ERROR" "set_global_primary_color_gui" "Could not edit the primary color."
		return 1
	fi
	return 0
}



set_global_secondary_color_gui()
{
	if ! set_global_secondary_color $(pick_color_from_menu | sed "s/#//"); then
		report_error "ERROR" "set_global_secondary_color_gui" "Could not edit the secondary color."
		return 1
	fi
	return 0
}



set_global_font()
{
	local font="$1"
	launch_option 6 set_option_value $waybar_config "font_family" "font_family=|.*|" '|' "$1" string || return 1; push_waybar_refresh
	launch_option 6 set_option_value $hyprlock_config "font_family" "font_family = |.*|" '|' "$1" string || return 1
	launch_option 6 set_option_value $wofi_config "font:" "font:|.*|;" '|' "$1" string || return 1
	launch_option 6 set_option_value $dunst_config "font" "font = |.*|" '|' "$1" string || return 1
	launch_option 6 set_option_value $kitty_config "font_family" "font_family |.*|" '|' "$1" string || return 1
	pkill dunst; dunst -conf $dunst_config & # Restarting dunst for the theme to apply
	return 0
}



set_outside_gaps()
{
	local value="$1"
	if ! is_valid_int $value; then
		report_error "ERROR" "set_ouside_gaps" "'$value' is not a valid integer."
		return 1
	fi
	# Hyprland
	if ! grep -q "gaps_out" $hyprland_config; then
		report_error "ERROR" "set_ouside_gaps" "Could not find option for outside margins for Hyprland."
		return 1
	fi
	sed -i "s/gaps_out = .*/gaps_out = ${value}/" $hyprland_config
	# Waybar
	if ! grep -q "^margins" $waybar_config; then
		report_error "ERROR" "set_ouside_gaps" "Could not find option for outside margins for Waybar."
		return 1
	fi
	sed -i "s/^margins=.*/margins=${value}/" $waybar_config
	push_waybar_refresh; push_waybar_reload

	# Need inside gaps recalculation
	set_inside_gaps $(get_inside_gaps)
	return 0
}



set_inside_gaps()
{
	local value="$1"
	local outsideGaps=$(cat $waybar_config | grep "^margins=" | sed "s/margins=//")
	local waybarValue=$((-1*outsideGaps+value*2))
	if ! is_valid_int $value; then
		report_error "ERROR" "set_inside_gaps" "'$value' is not a valid integer."
		return 1
	fi
	# Hyprland
	if ! grep -q "gaps_in" $hyprland_config; then
		report_error "ERROR" "set_inside_gaps" "Could not find option for inside margins for Hyprland."
		return 1
	fi
	sed -i "s/gaps_in = .*/gaps_in = ${value}/" $hyprland_config
	# Waybar
	if ! grep -q "^margin_bottom" $waybar_config; then
		report_error "ERROR" "set_inside_gaps" "Could not find option for inside margins for Waybar."
		return 1
	fi
	sed -i "s/^margin_bottom=.*/margin_bottom=${waybarValue}/" $waybar_config
	push_waybar_refresh; push_waybar_reload
	return 0
}



pick_color_from_menu()
{
	local color
	if ! color=$(zenity --color-selection --show-palette); then
		report_error "ERROR" "pick_color_from_menu" "Could not pick a color."
		return 1
	fi
	
	color=$(echo $color | sed "s/rgb(//" | sed "s/)//")
	if ! valid_rgb $color; then
		report_error "ERROR" "pick_color_from_menu" "The RGB value is invalid."
		return 1
	fi
	rgb_to_hex $color | sed "s/#//"
}



get_outside_gaps()
{
	if ! line=$(grep "gaps_out" $hyprland_config); then
		report_error "ERROR" "get_ouside_gaps" "Could not find option for outside margins for Hyprland."
		return 1
	fi
	echo $line | sed "s/gaps_out =//"
	return 0
}



get_inside_gaps()
{
	if ! line=$(grep "gaps_in" $hyprland_config); then
		report_error "ERROR" "get_inside_gaps" "Could not find option for inside margins for Hyprland."
		return 1
	fi
	echo $line | sed "s/gaps_in =//"
	return 0
}



# func : get_themingctl_configs
# desc : get the configs file for every app that themingctl can edit
# outp : list of apps and their respective configuration
# rtrn : 0 if no error, else 1
get_themingctl_configs()
{
	if ! grep ".*_config=\".*\"" $0; then
		report_error "ERROR" "get_themingctl_configs" "Could not retreive a single option."
		return 1
	fi
	return 0
}



# func : set_desktop_wallpaper
# desc : will set the new desktop wallpaper
# arg1 : path to the wallpaper
# outp : none
# rtrn : 0 if no error, else 1
set_desktop_wallpaper()
{
	local wallpaper="$1"
	if ! identify $wallpaper > /dev/null; then
		report_error "ERROR" "set_desktop_wallpaper" "$wallpaper is not an image."
		return 1
    fi
	if ! swww img $wallpaper; then
		report_error "ERROR" "set_desktop_wallpaper" "Could not apply wallpaper."
		return 1
	fi
	return 0
}



# func : get_desktop_wallpaper
# desc : will print current desktop wallpaper path
# outp : path to desktop wallpaper
# rtrn : 0 if no error, else 1
get_desktop_wallpaper()
{
	if ! line=$(swww query | head -n 1); then
		report_error "ERROR" "get_desktop_wallpaper" "Could not retreive current wallpaper."
		return 1
	fi
	echo $line | sed "s/.*image: //"
	return 0
}



# func : set_lockscreen_wallpaper
# desc : will set the new lockscreen wallpaper
# arg1 : path to the wallpaper
# outp : none
# rtrn : 0 if no error, else 1
set_lockscreen_wallpaper()
{
	local wallpaper="$1"
	if ! identify $wallpaper > /dev/null; then
		report_error "ERROR" "set_desktop_wallpaper" "$wallpaper is not an image."
		return 1
    fi
	wallpaper=$(realpath $wallpaper)
	if ! grep -q "path = .* #lockscreen_wallpaper" $hyprlock_config; then
		report_error "ERROR" "set_lockscreen_wallpaper" "Could not find wallpaper option."
		return 1
	fi
	sed -i "s!path = .* #lockscreen_wallpaper!path = $wallpaper #lockscreen_wallpaper!" $hyprlock_config
	return 0
}



# func : get_lockscreen_wallpaper
# desc : will print current lockscreen wallpaper path
# outp : path to lockscreen wallpaper
# rtrn : 0 if no error, else 1
get_lockscreen_wallpaper()
{
	if ! line=$(grep "path = .* #lockscreen_wallpaper" $hyprlock_config); then
		report_error "ERROR" "get_lockscreen_wallpaper" "Could not find wallpaper option."
		return 1
	fi
	echo $line | sed "s!path = !!" | sed "s!#.*!!"
	return 0
}



# func : set_kitty_colors_from_wallpaper
# desc : will apply wal generated shcema from given wallpaper to kitty config file
# arg1 : path to wallpaper which to get colors from
# outp : none
# rtrn : 0 if no error, else 1
set_kitty_colors_from_wallpaper()
{
	local wallpaper="$1"
	local walColor
	local plusOne
	local shiftNumber
	if ! identify $wallpaper > /dev/null; then
		report_error "ERROR" "set_kitty_colors_from_wallpaper" "'$wallpaper' is not a valid image."
		return 1
	fi

	# Generating colors scheme
	if ! wal -i $wallpaper > /dev/null; then
		report_error "ERROR" "set_kitty_colors_from_wallpaper" "An error occured during wal colors scheme generation."
		return 1
	fi

	# First settings all 15 colors
	for((i=0; i<8; i++)); do
		plusOne=$((i+1))
		walColor=$(sed -n "${plusOne}p" $HOME/.cache/wal/colors)

		shiftNumber=$((i+8))
		sed -i "s/color${i} #....../color${i} ${walColor}/" $kitty_config
		sed -i "s/color${shiftNumber} #....../color${shiftNumber} ${walColor}/" $kitty_config
	done

	# Changing special kitty values
	walColor=$(sed -n "8p" $HOME/.cache/wal/colors) # Color 7
	sed -i "s/foreground #....../foreground ${walColor}/" $kitty_config
	sed -i "s/cursor #....../cursor ${walColor}/" $kitty_config
	walColor=$(sed -n "1p" $HOME/.cache/wal/colors) # Color 0
	sed -i "s/background #....../background ${walColor}/" $kitty_config
	return 0
}



get_kitty_colors_all()
{
	# Loop through colors
	for i in {0..7}; do
		echo -e "color${i}: \e[48;5;${i}m FONT \e[0m"
	done
	# Reset color
	echo -e "\e[0m"
	return 0
}








# ========================
# === GLOBAL FUNCTIONS ===
# ========================

set_option_value()
{
	local configPath="$1"
	local option="$2"
	local pattern="$3"
	local delimiter="$4"
	local value="$5"
	local valueType="$6"

	local stringBeforeValue
	local stringAfterValue

	# Test config file validity
	if ! is_file_valid $configPath; then
      	report_error "ERROR" "set_option_value" "$configPath is not a valid config file."
      	return 1
	fi

	# Testing option presence in config file
    if ! line=$(grep "$option" $configPath); then
      	report_error "ERROR" "set_option_value" "Could not find option '$option' in '$configPath'."
      	return 1
    fi
	line=$(echo "$line" | sed 's/^[[:space:]]*//' | uniq)
	line=$(echo "$line" | grep "^${option}") # case when we have like 'inactive' and 'active'

	# Testing delimiters presence in pattern
    if ! echo $pattern | grep -q ".*${delimiter}.*${delimiter}.*"; then
      	report_error "ERROR" "set_option_value" "Could not find delimiters '$delimiter' in '$pattern'."
      	return 1
    fi

	# Test given value validity
	case $valueType in
		int)
			if ! is_valid_int $value; then
				report_error "ERROR" "set_option_value" "'$value' is not a valid integer."
				return 1
			fi
		;;

		hexadecimal)
			if ! is_hexvalue_valid $value; then
				report_error "ERROR" "set_option_value" "'$value' is not a valid hexadecimal value."
				return 1
			fi
		;;

		range)
			if ! is_range_valid $value; then
				report_error "ERROR" "set_option_value" "'$value' is not a valid range."
				return 1
			fi
		;;	

		rangeToHex)
			if ! value=$(range_to_hexadecimal $value); then
				report_error "ERROR" "set_option_value" "Could not transform range '$value' in hexadecimal value."
				return 1
			fi
		;;

		image)
			if ! identify $value > /dev/null; then
				report_error "ERROR" "set_option_value" "'$value' is not a valid image."
				return 1
			fi
			value=$(realpath $value)
		;;

		file)
			if ! is_file_valid $value; then
				report_error "ERROR" "set_option_value" "'$value' is not a valid file."
				return 1
			fi
			value=$(realpath $value)
		;;

		string);;

		*)
			report_error "ERROR" "set_option_value" "Unknown type '$value'."
			return 1
		;;
	esac

	# Replacing
	stringBeforeValue=$(echo $pattern | sed "s!${delimiter}.*!!")
	stringBeforeValue=$(echo $line | sed "s!\(^${stringBeforeValue}\).*!\1!")
	stringAfterValue=$(echo $pattern | sed "s!.*${delimiter}.*${delimiter}!!")
	stringAfterValue=$(echo $line | sed "s!.*\(${stringAfterValue}$\)!\1!")
	sed -i "s!\(^[[:space:]]*\)${stringBeforeValue}.*${stringAfterValue}!\1${stringBeforeValue}${value}${stringAfterValue}!g" $configPath

	# # DEBUG
	# echo "line = $line"
	# echo "before = $stringBeforeValue"
	# echo "after = $stringAfterValue"
	# echo "result = $stringBeforeValue$value$stringAfterValue"
	return 0
}



get_option_value()
{
	local configPath="$1"
	local option="$2"
	local pattern="$3"
	local delimiter="$4"

	local stringBeforeValue
	local stringAfterValue

	# Test config file validity
	if ! is_file_valid $configPath; then
      	report_error "ERROR" "set_option_value" "$configPath is not a valid config file."
      	return 1
	fi

	# Testing option presence in config file
    if ! line=$(grep "$option" "$configPath"); then
      	report_error "ERROR" "set_option_value" "Could not find option '$option' in '$configPath'."
      	return 1
    fi
	# Removing eventual spaces at the start of $line
	line=$(echo "$line" | sed 's/^[[:space:]]*//')
	line=$(echo "$line" | grep "^${option}" | uniq)  # case when we have like 'inactive' and 'active'

	# Testing delimiters presence in pattern
    if ! echo $pattern | grep -q ".*${delimiter}.*${delimiter}.*"; then
      	report_error "ERROR" "set_option_value" "Could not find delimiters '$delimiter' in '$pattern'."
      	return 1
    fi

	

	# Getting
	stringBeforeValue=$(echo $pattern | sed "s/${delimiter}.*//")
	stringBeforeValue=$(echo $line | sed "s/\(^${stringBeforeValue}\).*/\1/")
	stringAfterValue=$(echo $pattern | sed "s/.*${delimiter}.*${delimiter}//")
	stringAfterValue=$(echo $line | sed "s/.*\(${stringAfterValue}$\)/\1/")
	echo $line | sed "s!${stringBeforeValue}\(.*\)${stringAfterValue}!\1!"
	return 0
}










# ==========================
# === STARTING FUNCTIONS ===
# ==========================

# func : launch_option
# desc : test if enough args if is good launch the given option fllowed by given args
# arg1 : required number of arguments for the option to be launched
# arg2 : option to launch
# arg3 : option arguments
# outp : none
# rtrn : 0 if no error, else 1
launch_option()
{
    local required_arg_count="$1"
    local option_name="$2"
    shift 2

    arguments_check "$option_name" $required_arg_count $# || return 1
    if ! $option_name "$@"; then
        report_error "ERROR" "$option_name $@" "An error occured."
        return 1
    fi
    return 0
}



# func : main
# desc : the core of the script. Will mostly read options and launch appropriate functions
# args : every args given to the script
# outp : none
# rtrn : 0 if no error, else 1
main()
{
    if [ $# -eq 0 ]; then
        report_error "FATAL" "$0" "No given arguments."
        return 1
    fi

	option="$1"
	shift 1
	
	case $option in

		# Setup
		--set-hyprland-config) launch_option 6 set_option_value $0 "hyprland_config" "hyprland_config=\"|.*|\" #HYPRLAND_CONFIG" '|' "$1" string ;;
		--set-waybar-config) launch_option 6 set_option_value $0 "waybar_config" "waybar_config=\"|.*|\" #WAYBAR_CONFIG" '|' "$1" string ;;
		--set-hyprlock-config) launch_option 6 set_option_value $0 "hyprlock_config" "hyprlock_config=\"|.*|\" #HYPRLOCK_CONFIG" '|' "$1" string ;;
		--set-wofi-config) launch_option 6 set_option_value $0 "wofi_config" "wofi_config=\"|.*|\" #WOFI_CONFIG" '|' "$1" string ;;
		--set-dunst-config) launch_option 6 set_option_value $0 "dunst_config" "dunst_config=\"|.*|\" #DUNST_CONFIG" '|' "$1" string ;;
		--set-kitty-config) launch_option 6 set_option_value $0 "kitty_config" "kitty_config=\"|.*|\" #KITTY_CONFIG" '|' "$1" string ;;
		--get-hyprland-config) launch_option 4 get_option_value $0 "hyprland_config" "hyprland_config=\"|.*|\" #HYPRLAND_CONFIG" '|';; 
		--get-waybar-config) launch_option 4 set_option_value $0 "waybar_config" "waybar_config=\"|.*|\" #WAYBAR_CONFIG" '|';;
		--get-hyprlock-config) launch_option 4 set_option_value $0 "hyprlock_config" "hyprlock_config=\"|.*|\" #HYPRLOCK_CONFIG" '|';;
		--get-wofi-config) launch_option 4 set_option_value $0 "wofi_config" "wofi_config=\"|.*|\" #WOFI_CONFIG" '|';;
		--get-dunst-config) launch_option 4 set_option_value $0 "dunst_config" "dunst_config=\"|.*|\" #DUNST_CONFIG" '|';;
		--get-kitty-config) launch_option 4 set_option_value $0 "kitty_config" "kitty_config=\"|.*|\" #KITTY_CONFIG" '|';;
		--get-themingctl-configs) launch_option 0 get_themingctl_configs;;

		# General
		--auto-theming) launch_option 1 auto_theming $@;;
        --save-theme) launch_option 1 save_theme $@;;
        --load-theme) launch_option 1 load_theme $@;;
		--set-global-primary-color) launch_option 1 set_global_primary_color $1;;
		--set-global-primary-color-gui) launch_option 0 set_global_primary_color_gui;;
		--set-global-secondary-color) launch_option 1 set_global_secondary_color $1;;
		--set-global-secondary-color-gui) launch_option 0 set_global_secondary_color_gui;;
		--set-global-font) launch_option 1 set_global_font "$1";;
		--set-outside-gaps) launch_option 1 set_outside_gaps "$1";;
		--set-inside-gaps) launch_option 1 set_inside_gaps "$1";;
		--pick-color-from-menu) launch_option 0 pick_color_from_menu;;
		--pick-color-from-monitor) hyprpicker ;;
		--get-outside-gaps) launch_option 0 get_outside_gaps;;
		--get-inside-gaps) launch_option 0 get_inside_gaps;;

		# Hyprland
		--set-app-focused-color) launch_option 6 set_option_value $hyprland_config "col.active_border" "col.active_border = rgba(|.*|..)" '|' $1 hexadecimal ;;
		--set-app-unfocused-color) launch_option 6 set_option_value $hyprland_config "col.inactive_border" "col.inactive_border = rgba(|.*|..)" '|' $1 hexadecimal ;;
		--set-app-focused-opacity) launch_option 6 set_option_value $hyprland_config "active_opacity" "active_opacity = |.*|" '|' $1 range ;;
		--set-app-unfocused-opacity) launch_option 6 set_option_value $hyprland_config "inactive_opacity" "inactive_opacity = |.*|" '|' $1 range ;;
		--set-app-focused-border-opacity) launch_option 6 set_option_value $hyprland_config "col.active_border" "col.active_border = rgba(......|.*|)" '|' $1 rangeToHex ;;
		--set-app-unfocused-border-opacity) launch_option 6 set_option_value $hyprland_config "col.inactive_border" "col.inactive_border = rgba(......|.*|)" '|' $1 rangeToHex ;;
		--set-app-border-radius) launch_option 6 set_option_value $hyprland_config "rounding" "rounding = |.*|" '|' $1 int ;;
		--set-app-border-width) launch_option 6 set_option_value $hyprland_config "border_size" "border_size = |.*|" '|' $1 int ;;
		--get-app-focused-color) launch_option 4 get_option_value $hyprland_config "col.active_border" "col.active_border = rgba(|.*|..)" '|' ;;
		--get-app-unfocused-color) launch_option 4 get_option_value $hyprland_config "col.inactive_border" "col.inactive_border = rgba(|.*|..)" '|';;
		--get-app-focused-opacity) launch_option 4 get_option_value $hyprland_config "active_opacity" "active_opacity = |.*|" '|';;
		--get-app-unfocused-opacity) launch_option 4 get_option_value $hyprland_config "inactive_opacity" "inactive_opacity = |.*|" '|';;
		--get-app-focused-border-opacity) launch_option 4 get_option_value $hyprland_config "col.active_border" "col.active_border = rgba(......|.*|)" '|';;
		--get-app-unfocused-border-opacity) launch_option 4 get_option_value $hyprland_config "col.inactive_border" "col.inactive_border = rgba(......|.*|)" '|';;
		--get-app-border-radius) launch_option 4 get_option_value $hyprland_config "rounding" "rounding = |.*|" '|';;
		--get-app-border-width) launch_option 4 get_option_value $hyprland_config "border_size" "border_size = |.*|" '|';;

		# Waybar
        --set-waybar-focused-color) launch_option 6 set_option_value $waybar_config "focused_color" "focused_color=#|.*|" '|' $1 hexadecimal; push_waybar_refresh;;
        --set-waybar-unfocused-color) launch_option 6 set_option_value $waybar_config "unfocused_color" "unfocused_color=#|.*|" '|' $1 hexadecimal; push_waybar_refresh;;
		--set-waybar-focused-opacity) launch_option 6 set_option_value $waybar_config "focused_opacity" "focused_opacity=|.*|" '|' $1 range; push_waybar_refresh;;
		--set-waybar-unfocused-opacity) launch_option 6 set_option_value $waybar_config "unfocused_opacity" "unfocused_opacity=|.*|" '|' $1 range; push_waybar_refresh;;
		--set-waybar-focused-border-opacity) launch_option 6 set_option_value $waybar_config "focused_border_opacity" "focused_border_opacity=|.*|" '|' $1 range; push_waybar_refresh;;
		--set-waybar-unfocused-border-opacity) launch_option 6 set_option_value $waybar_config "unfocused_border_opacity" "unfocused_border_opacity=|.*|" '|' $1 range; push_waybar_refresh;;
		--set-waybar-position) launch_option 6 set_option_value $waybar_config "position" "position=|.*|" '|' "$1" string; push_waybar_refresh; push_waybar_reload;;
		--set-waybar-focused-opacity) launch_option 6 set_option_value $waybar_config "focused_opacity" "focused_opacity=|.*|" '|' $1 range; push_waybar_refresh;;
		--set-waybar-unfocused-opacity) launch_option 6 set_option_value $waybar_config "focused_opacity" "focused_opacity=|.*|" '|' $1 range; push_waybar_refresh;;
		--set-waybar-border-radius) launch_option 6 set_option_value $waybar_config "border_radius" "border_radius=|.*|" '|' $1 int; push_waybar_refresh;;
		--set-waybar-border-width) launch_option 6 set_option_value $waybar_config "border_width" "border_width=|.*|" '|' $1 int; push_waybar_refresh;;
		--set-waybar-font) launch_option 6 set_option_value $waybar_config "font_family" "font_family=|.*|" '|' "$1" string; push_waybar_refresh;;
		--set-waybar-font-color) launch_option 6 set_option_value $waybar_config "font_color" "font_color=#|.*|" '|' "$1" hexadecimal; push_waybar_refresh;;
		--toggle-waybar-island-mode) launch_option 6 set_option_value $waybar_config "waybar_mode" "waybar_mode=|.*|" '|' "island" string; push_waybar_refresh;;
		--toggle-waybar-magnet-mode) launch_option 6 set_option_value $waybar_config "waybar_mode" "waybar_mode=|.*|" '|' "magnet" string; push_waybar_refresh;;
		--toggle-waybar-isles-mode) launch_option 6 set_option_value $waybar_config "waybar_mode" "waybar_mode=|.*|" '|' "isles" string; push_waybar_refresh;;
        --get-waybar-focused-color) launch_option 4 get_option_value $waybar_config "focused_color" "focused_color=#|.*|" '|';;
        --get-waybar-unfocused-color) launch_option 4 get_option_value $waybar_config "unfocused_color" "unfocused_color=#|.*|" '|';;
		--get-waybar-focused-opacity) launch_option 4 get_option_value $waybar_config "focused_opacity" "focused_opacity=|.*|" '|';;
		--get-waybar-unfocused-opacity) launch_option 4 get_option_value $waybar_config "unfocused_opacity" "unfocused_opacity=|.*|" '|';;
		--get-waybar-focused-border-opacity) launch_option 4 get_option_value $waybar_config "focused_border_opacity" "focused_border_opacity=|.*|" '|';;
		--get-waybar-unfocused-border-opacity) launch_option 4 get_option_value $waybar_config "unfocused_border_opacity" "unfocused_border_opacity=|.*|" '|';;
		--get-waybar-position) launch_option 4 get_option_value $waybar_config "focused_color" "focused_color=#|.*|" '|';;
		--get-waybar-focused-opacity) launch_option 4 get_option_value $waybar_config "focused_opacity" "focused_opacity=#|.*|" '|';;
		--get-waybar-unfocused-opacity) launch_option 4 get_option_value $waybar_config "focused_opacity" "focused_opacity=#|.*|" '|';;
		--get-waybar-border-radius) launch_option 4 get_option_value $waybar_config "border_radius" "border_radius=|.*|" '|';;
		--get-waybar-border-width) launch_option 4 get_option_value $waybar_config "border_width" "border_width=|.*|" '|';;
		--get-waybar-font) launch_option 4 get_option_value $waybar_config "font_family" "font_family=|.*|" '|';;
		--get-waybar-font-color) launch_option 4 get_option_value $waybar_config "font_color" "font_color=#|.*|" '|';;
		--get-waybar-mode) launch_option 4 get_option_value $waybar_config "waybar_mode" "waybar_mode=|.*|" '|';;

		# Desktop
        --set-desktop-wallpaper) launch_option 1 set_desktop_wallpaper $@;;
		--get-desktop-wallpaper) launch_option 0 get_desktop_wallpaper;;

		# Hyprlock
		--set-lockscreen-wallpaper) launch_option 1 set_lockscreen_wallpaper $@;;
		--set-lockscreen-font) launch_option 6 set_option_value $hyprlock_config "font_family" "font_family = |.*|" '|' "$1" string;;
		--get-lockscreen-wallpaper) launch_option 0 get_lockscreen_wallpaper;;
		--get-lockscreen-font) launch_option 4 get_option_value $hyprlock_config "font_family" "font_family = |.*|" '|';;

		# Wofi
        --set-wofi-primary-color) launch_option 6 set_option_value $wofi_config "@define-color primary" "@define-color primary #|.*|;" '|' $1 hexadecimal;;
		--set-wofi-secondary-color) launch_option 6 set_option_value $wofi_config "@define-color secondary" "@define-color secondary #|.*|;" '|' $1 hexadecimal;;
		--set-wofi-font) launch_option 6 set_option_value $wofi_config "font:" "font:|.*|;" '|' "$1" string;;
        --get-wofi-primary-color) launch_option 4 get_option_value $wofi_config "@define-color primary" "@define-color primary #|.*|;" '|';;
		--get-wofi-secondary-color) launch_option 4 get_option_value $wofi_config "@define-color secondary" "@define-color secondary #|.*|;" '|';;
		--get-wofi-font) launch_option 4 get_option_value $wofi_config "font:" "font:|.*|;" '|';;

		# Dunst
        --set-dunst-primary-color) launch_option 6 set_option_value $dunst_config "foreground" "foreground = \"#|.*|\"" '|' $1 hexadecimal;;
		--set-dunst-secondary-color) launch_option 6 set_option_value $dunst_config "background" "background = \"#|.*|\"" '|' $1 hexadecimal;;
		--set-dunst-border-color) launch_option 6 set_option_value $dunst_config "frame_color" "frame_color = \"#|.*|\"" '|' $1 hexadecimal;;
		--set-dunst-border-radius) launch_option 6 set_option_value $dunst_config "corner_radius" "corner_radius = |.*|" '|' $1 int;;
		--set-dunst-border-width) launch_option 6 set_option_value $dunst_config "frame_width" "frame_width = |.*|" '|' $1 int;;
		--set-dunst-font) launch_option 6 set_option_value $dunst_config "font" "font = |.*|" '|' "$1" string;;
        --get-dunst-primary-color) launch_option 4 get_option_value $dunst_config "foreground" "foreground = \"#|.*|\"" '|';;
		--get-dunst-secondary-color) launch_option 4 get_option_value $dunst_config "background" "background = \"#|.*|\"" '|';;
		--get-dunst-border-color) launch_option 4 get_option_value $dunst_config "frame_color" "frame_color = \"#|.*|\"" '|';;
		--get-dunst-border-radius) launch_option 4 get_option_value $dunst_config "corner_radius" "corner_radius = |.*|" '|';;
		--get-dunst-border-width) launch_option 4 get_option_value $dunst_config "frame_width" "frame_width = |.*|" '|';;
		--get-dunst-font) launch_option 4 get_option_value $dunst_config "font" "font = |.*|" '|';;

		# Kitty
		--set-kitty-font-color) launch_option 6 set_option_value $kitty_config "foreground" "foreground #|.*|" '|' $1 hexadecimal;;
		--set-kitty-background-color) launch_option 6 set_option_value $kitty_config "background " "background #|.*|" '|' $1 hexadecimal;;
		--set-kitty-cursor-color) launch_option 6 set_option_value $kitty_config "cursor" "cursor #|.*|" '|' $1 hexadecimal;;
		--set-kitty-cursor-text-color) launch_option 6 set_option_value $kitty_config "cursor_text_color" "cursor_text_color #|.*|" '|' $1 hexadecimal;;
		--set-kitty-url-color) launch_option 6 set_option_value $kitty_config "url_color" "url_color #|.*|" '|' $1 hexadecimal;;
		--set-kitty-color0) launch_option 6 set_option_value $kitty_config "color0" "color0 #|.*|" '|' $1 hexadecimal;;
		--set-kitty-color1) launch_option 6 set_option_value $kitty_config "color1 " "color1 #|.*|" '|' $1 hexadecimal;;
		--set-kitty-color2) launch_option 6 set_option_value $kitty_config "color2" "color2 #|.*|" '|' $1 hexadecimal;;
		--set-kitty-color3) launch_option 6 set_option_value $kitty_config "color3" "color3 #|.*|" '|' $1 hexadecimal;;
		--set-kitty-color4) launch_option 6 set_option_value $kitty_config "color4" "color4 #|.*|" '|' $1 hexadecimal;;
		--set-kitty-color5) launch_option 6 set_option_value $kitty_config "color5" "color5 #|.*|" '|' $1 hexadecimal;;
		--set-kitty-color6) launch_option 6 set_option_value $kitty_config "color6" "color6 #|.*|" '|' $1 hexadecimal;;
		--set-kitty-color7) launch_option 6 set_option_value $kitty_config "color7" "color7 #|.*|" '|' $1 hexadecimal;;
		--set-kitty-opacity) launch_option 6 set_option_value $kitty_config "background_opacity" "background_opacity |.*|" '|' $1 range;;
		--set-kitty-font) launch_option 6 set_option_value $kitty_config "font_family" "font_family |.*|" '|' "$1" string;;
		--set-kitty-font-size) launch_option 6 set_option_value $kitty_config "font_size" "font_size |.*|" '|' $1 int;;
		--set-kitty-colors-from-wallpaper) launch_option 1 set_kitty_colors_from_wallpaper $@;;
		--get-kitty-font-color) launch_option 4 get_option_value $kitty_config "foreground" "foreground #|.*|" '|';;
		--get-kitty-background-color) launch_option 4 get_option_value $kitty_config "background " "background #|.*|" '|';;
		--get-kitty-cursor-color) launch_option 4 get_option_value $kitty_config "cursor " "cursor #|.*|" '|';;
		--get-kitty-cursor-text-color) launch_option 4 get_option_value $kitty_config "cursor_text_color" "cursor_text_color #|.*|" '|';;
		--get-kitty-url-color) launch_option 4 get_option_value $kitty_config "url_color" "url_color #|.*|" '|';;
		--get-kitty-color0) launch_option 4 get_option_value $kitty_config "color0" "color0 #|.*|" '|';;
		--get-kitty-color1) launch_option 4 get_option_value $kitty_config "color1 " "color1 #|.*|" '|';;
		--get-kitty-color2) launch_option 4 get_option_value $kitty_config "color2" "color2 #|.*|" '|';;
		--get-kitty-color3) launch_option 4 get_option_value $kitty_config "color3" "color3 #|.*|" '|';;
		--get-kitty-color4) launch_option 4 get_option_value $kitty_config "color4" "color4 #|.*|" '|';;
		--get-kitty-color5) launch_option 4 get_option_value $kitty_config "color5" "color5 #|.*|" '|';;
		--get-kitty-color4) launch_option 4 get_option_value $kitty_config "color6" "color6 #|.*|" '|';;
		--get-kitty-color7) launch_option 4 get_option_value $kitty_config "color7" "color7 #|.*|" '|';;
		--get-kitty-colors-all) launch_option 0 get_kitty_colors_all;;
		--get-kitty-opacity) launch_option 4 get_option_value $kitty_config "background_opacity" "background_opacity |.*|" '|';;
		--get-kitty-font) launch_option 4 get_option_value $kitty_config "font_family" "font_family |.*|" '|';;
		--get-kitty-font-size) launch_option 4 get_option_value $kitty_config "font_size" "font_size |.*|" '|';;

		-h|--help) show_help | less;;
        *) report_error "ERROR" "$option" "Unknown option. Use --help to see usage." && return 1;;
	esac
    return $?
}



# |======================|
# |======== MAIN ========|
# |======================|
if ! main "$@"; then
    report_error "FATAL" "$0" "An error occurred during $0 execution."
    exit 1
else
    exit 0
fi
