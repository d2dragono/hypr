#!/bin/bash

# Script used to create simple notifications
# Made by DRAGONO

show_help()
{
    echo
    echo "Usage: $0 [options]" 
    echo "Options:"
    echo
    echo "    -i, --icon [path/to/icon]    Will display an icon at the left of the notification. Note that if left empty it will use the default icon."
    echo "    -p, --progress-bar [int]     Display a progress bar ranging from 0 to a 100, [int] being the desired percentage."
    echo "    -c, --code [int]             If two notifications have the same code, the newest one will replace the oldest one."
    echo "    -t, --title [string]         Title of the notification."
    echo "    -m, --message [string]       Text inside the notification."
    echo "    -u, --urgency [1|2|3]        Urgency of the notification. 1 is low, 2 is normal and 3 is urgent."
    echo "    -e, --expiration [int]       Duration of the notification."
    echo "    -h, --help                   Show help."
}



# === Main script ===
iconPath=" "
progressBar=" "
code=" "
title="System"
message=" "
urgency=" "
expiration=" "

while [ $# -gt 0 ]
do
    case "$1" in

        -i|--icon)
            # Verifying passed arguments
            if [ $# -lt 2 ]
            then
                echo
                >&2 echo "[ERROR]: $1: not enough arguments."
                echo "Usage: $0 $1 [path/to/icon]"
                show_help
                exit 1
            fi

            # Does the icon exist ?
            identify "$2" > /dev/null
            if [ ! "$?" ]
            then
                echo
                >&2 echo "[ERROR]: $2: the given file is not a valid icon."
                echo "Usage: $0 $1 [path/to/icon]"
                show_help
                exit 1
            fi

            # Valid icon
            iconPath="--icon $2"
            shift 2
        ;;

        -p|--progress-bar)
            # Verifying passed arguments
            if [ $# -lt 2 ]
            then
                echo
                >&2 echo "[ERROR]: $1: not enough arguments."
                echo "Usage: $0 $1 [int]"
                show_help
                exit 1
            fi

            # Is the given value an int ?
            if [[ -n ${input//[0-9]/} ]]
            then
                echo
                >&2 echo "[ERROR]: $1: this is not an integer."
                echo "Usage: $0 $1 [int]"
                show_help
                exit 1 
            fi

            # Is the percentage valid (between 0 and 100)
            if (($2 < 0 || $2 > 100))
            then
                echo
                >&2 echo "[ERROR]: the percentage ($1) is not valid."
                echo "Usage: $0 $1 [int]"
                show_help
                exit 1 
            fi

            # Else we are good to go
            progressBar="-h int:value:$2"
            shift 2
        ;;

        -c|--code)
            # Verifying passed arguments
            if [ $# -lt 2 ]
            then
                echo
                >&2 echo "[ERROR]: $1: not enough arguments."
                echo "Usage: $0 $1 [int]"
                show_help
                exit 1
            fi

            # Is the given value an int ?
            if [[ -n ${input//[0-9]/} ]]
            then
                echo
                >&2 echo "[ERROR]: $1: this is not an integer."
                echo "Usage: $0 $1 [int]"
                show_help
                exit 1 
            fi

            # Else we are good to go
            code="-r $2"
            shift 2
        ;;

        -t|--title)
            # Verifying passed arguments
            if [ $# -lt 2 ]
            then
                echo
                >&2 echo "[ERROR]: $1: not enough arguments."
                echo "Usage: $0 $1 [string]"
                show_help
                exit 1
            fi

            # Else we are good to go
            title="$2"
            shift 2
        ;;

        -m|--message)
            # Verifying passed arguments
            if [ $# -lt 2 ]
            then
                echo
                >&2 echo "[ERROR]: $1: not enough arguments."
                echo "Usage: $0 $1 [string]"
                show_help
                exit 1
            fi

            # Else we are good to go
            message="$2"
            shift 2
        ;;

        -u|--urgency)
            # Verifying passed arguments
            if [ $# -lt 2 ]
            then
                echo
                >&2 echo "[ERROR]: $1: not enough arguments."
                echo "Usage: $0 $1 [1|2|3]"
                show_help
                exit 1
            fi

            # Is the given value an int ?
            if [[ -n ${2//[0-9]/} ]]
            then
                echo
                >&2 echo "[ERROR]: $2: this is not an integer."
                echo "Usage: $0 $1 [1|2|3]"
                show_help
                exit 1 
            fi

            # Is the percentage valid (between 1 and 3)
            if (($2 < 1 || $2 > 3))
            then
                echo
                >&2 echo "[ERROR]: the urgency level ($2) is not valid."
                echo "Usage: $0 $1 [1|2|3]"
                show_help
                exit 1 
            fi

            # Else we are good to go
            case $2 in
                1)
                    urgency="-u low"
                ;;

                2)
                    urgency="-u normal"
                ;;

                3)
                    urgency="-u critical"
                ;;
            esac
            # Shifting
            shift 2
        ;;

        -e|--expiration)
            # Verifying passed arguments
            if [ $# -lt 2 ]
            then
                echo
                >&2 echo "[ERROR]: $1: not enough arguments."
                echo "Usage: $0 $1 [int]"
                show_help
                exit 1
            fi

            # Is the given value an int ?
            if [[ -n ${input//[0-9]/} ]]
            then
                echo
                >&2 echo "[ERROR]: $1: this is not an integer."
                echo "Usage: $0 $1 [int]"
                show_help
                exit 1 
            fi

            # Else we are good to go
            expiration="-t $2"
            shift 2
        ;;

        -h|--help)
            show_help
            shift 1
        ;;

        *)
            echo
            echo "[ERROR]: Unknown option: $1"
            show_help
            exit 1
        ;;

    esac
done

# Launching the notification
dunstify "$title" "$message" $iconPath $code $progressBar $urgency $expiration

# Done
exit 0