#!/bin/bash
#                          _ _                 _   _ 
#    _ __ ___   ___  _ __ (_) |_ ___  _ __ ___| |_| |
#   | '_ ` _ \ / _ \| '_ \| | __/ _ \| '__/ __| __| |
#   | | | | | | (_) | | | | | || (_) | | | (__| |_| |
#   |_| |_| |_|\___/|_| |_|_|\__\___/|_|  \___|\__|_|
#
# by DRAGONO               

# func : show_help
# desc : will display to the user how to use monitorctl
# outp : The help message/usage of the script
# rtrn : 0
show_help()
{
    echo
    echo "Usage: $0 [option]" 
    echo "Options:"
    echo
    echo "    Managing the configurations:"
    echo
    echo "    -u, --update [path/to/config]             Apply the current monitor configuration to the system."
    echo "    -l, --list [path/to/config]               List the existing configurations."
    echo "    -v, --list-verbose [path/to/config]       List the existing configurations with details."
    echo "    -c, --current [path/to/config]            Show the configuration in use."
    echo "    --waybar-daemon [path/to/config] [int]    Launch the waybar daemon."
    echo "    --update-daemon [path/to/config] [int]    Launch the update daemon." 
    echo
    echo "    -h, --help                                Show help."
}



# func : report_error
# desc : will echo a given message to stderr
# arg1 : the error type : fatal, error, ... This is just and indication and do nothing much.
# arg2 : title of the error, basically where the error occured
# arg3 : the error message
# outp : An error message to stderr
# rtrn : 0
report_error()
{
    local error_type="$1"
    local error_title="$2"
    local error_message="$3"
    >&2 echo "[${error_type}]: ${error_title}: ${error_message}"
    return 0
}



# func : arguments_check
# desc : will check if enough arguments are being given to an option
# arg1 : the option being checked
# arg2 : required number of arguments
# arg3 : current number of arguments
# outp : an error message if there is not enough arguments
# rtrn : 0 if no error, else 1
arguments_check()
{
    local checked_option="$1"
    local required_arg_number="$2"
    local current_arg_number="$3"
    if ((current_arg_number < required_arg_number)); then
        report_error "FATAL" "$checked_option" "Not enough arguments."
        return 1
    fi
    return 0
}



# func : get_plugged_monitors
# desc : will return a list of comma separated plugged monitors
# outp : list of comma separated plugged monitors
# rtrn : 0 if no error, else 1
get_plugged_monitors()
{
	local monitors
	local final

    if ! monitors=$(hyprctl monitors | grep 'Monitor' | sed "s/Monitor //g" | sed "s/ (ID //g" | sed "s/.)://g"); then
        report_error "ERROR" "get_plugged_monitors" "Could not parse."
        return 1
    fi
    
    final=""
    for monitor in $(echo "$monitors"); do
		final="${final}${monitor},"
    done
    
    echo "$final" | sed "s/,$//"
    return 0
}



# func : get_focused_monitor_name
# desc : function to get the currently focused monitor name
# outp : the focused monitor name
# rtrn : 0 if no error, else 1
get_focused_monitor_name()
{
	local monitors
	local status

    if ! monitors=$(get_plugged_monitors); then
        report_error "ERROR" "get_focused_monitor_name" "Could not get the plugged monitors list."
        return 1
	fi

    for monitor in $(echo "$monitors" | sed "s/,/ /g")
    do
        status=$(hyprctl monitors | grep -C 11 "$monitor" | tail -n 1 | sed "s/\tfocused: //g")
        if [ "$status" = "yes" ]
        then
            echo "$monitor"
            return 0
        fi
    done
    
    report_error "ERROR" "get_focused_monitor_name" "Could not find the focused monitor."
    return 1
}



# func : get_focused_app_monitor_id
# desc : function to get the id of the monitor where the focused app is
# outp : the focused monitor id
# rtrn : 0 if no error, else 1
get_focused_app_monitor_id()
{
	if ! focused_app_monitor_id=$(hyprctl activewindow | grep "monitor: [0-9]" | sed "s/.*monitor: //g"); then
		report_error "ERROR" "get_focused_app_monitor_id" "Could not retreive the id of the focused app monitor."
		return 1
	fi
	echo "$focused_app_monitor_id"
	return 0
}



# func : get_monitors_ids_list
# desc : function to get the list of monitors/ids : separated
# outp : the list of monitors/ids separated by :
# rtrn : 0 if no error, else 1
get_monitors_ids_list()
{
	if ! monitors_ids_list=$(hyprctl monitors all | grep "Monitor" | sed "s/Monitor \(.*\) (\(ID .\)):/\1:\2/g" | sed "s/ID //g"); then
		report_error "ERROR" "get_monitors_ids_list" "Could not retreive the the list of monitors/ids."
		return 1
	fi
	echo "$monitors_ids_list"
	return 0
}



# func : get_focused_app_monitor
# desc : function to get the currently focused monitor
# outp : the focused monitor name where the focused app is
# rtrn : 0 if no error, else 1
get_focused_app_monitor()
{
	local focused_app_monitor_id
	local monitors_ids_list

	if ! focused_app_monitor_id=$(get_focused_app_monitor_id); then
		report_error "ERROR" "get_focused_app_monitor" "Could not retreive the id of the focused app monitor."
		return 1
	fi

	if ! monitors_ids_list=$(get_monitors_ids_list); then
		report_error "ERROR" "get_focused_app_monitor" "Could not retreive the list of monitors/ids."
		return 1
	fi

	for monitor_id in $monitors_ids_list
	do
		id=$(echo $monitor_id | sed "s/.*://")
		if [ "$id" = "$focused_app_monitor_id" ]
		then
			echo $monitor_id | sed "s/:.*//"
			return 0
		fi
	done

	report_error "ERROR" "get_focused_app_monitor" "Could not retreive the focused app monitor."
	return 1
}



# func : update_order
# desc : function to update the monitor order in monitors.conf
# arg1 : order of the current configuration to set
# outp : none
# rtrn : 0 if no error, else 1
update_order()
{
    local order="$1"
    local shifting
    local raw_monitor
    local res
    local scale
    local x_axis
    
    order=$(echo "$order" | sed "s/.*=//g")
    shifting=0
    
    # Destroying current configuration
    echo "" > "$hyprPath"/configs/hyprland/monitors.conf
    
    for monitor in $(echo "$order" | sed "s/,/ /g")
    do
        # Removing the scale from monitor name
        raw_monitor=$(echo "$monitor" | sed "s/:.*//g")
        # Reading the total resolution of the current screen
        if ! res=$(hyprctl monitors all | grep -C 1 "$raw_monitor" | tail -n 1 | sed "s/\(.*\)@.*/\1/g" | sed "s/\t//g"); then
			report_error "ERROR" "update_order" "Could not retreive $monitor resolution."
			return 1
		fi

        # Reading the scale
        scale=$(echo "$monitor" | sed "s/.*://g")
        # Writing...
        echo "${final}monitor=$raw_monitor,preferred,${shifting}x0,$scale" >> "$hyprPath"/configs/hyprland/monitors.conf
        # Calculating the next shifting
        x_axis=$(echo "$res" | sed "s/x.*//g")
        shifting=$((shifting + x_axis / scale))
    done
    
    return 0
}



# func : get_waybars_status_monitors_list
# desc : function to get a list of monitor/waybar status, : separated
# arg1 : status of waybars (on or off, comma separated)
# arg2 : list of monitors, used to associate waybars status with monitors
# outp : list of pair of monitor:waybarStatus
# rtrn : 0 if no error, else 1
get_waybars_status_monitors_list()
{
	local waybars="$1"
	local monitors="$2"
	local number_of_pair
	local list

	list=""
	number_of_pair=$(echo $monitors | sed "s/,/ /g" | wc -w)

	for ((i=1; i<=number_of_pair; i++)); do
		list=${list}$(echo $monitors | cut -d, -f$i)
		list=${list}:$(echo $waybars | cut -d, -f$i)
		list=${list}$'\n'
	done

	echo "$list"
	return 0
}



# func : create_waybars_configs
# desc : function to create unexisting monitors waybar config
# arg1 : list of monitors to create a config to
# outp : none
# rtrn : 0
create_waybars_configs()
{
    local monitors="$1"
	for monitor in $(echo "$monitors" | sed "s/,/ /g")
	do
	    if [ ! -d "$hyprPath"/configs/waybar/waybars/"$monitor" ]
	    then
	        mkdir -p "$hyprPath"/configs/waybar/waybars/"$monitor"
	        cp "$hyprPath"/configs/waybar/templates/* "$hyprPath"/configs/waybar/waybars/"$monitor"/
	        sed -i "s/\(.*\"output\": \).*/\1\"${monitor}\",/g" "$hyprPath"/configs/waybar/waybars/"$monitor"/config.jsonc
	    fi
	done
    return 0
}



# func : update_waybars
# desc : function to update the display of waybars on monitors
# arg1 : status of waybars (on or off, comma separated)
# arg2 : list of monitors, used to associate waybars status with monitors
# outp : none
# rtrn : 0 if no error, else 1
update_waybars()
{
	local waybars="$1"
	local monitors="$2"
    local waybars_status_only
	local waybars_status_monitors_list
    local monitors_on
	# Creating waybar config for each monitors (if not existing already).
	create_waybars_configs $monitors
    # Retreiving list
    waybars_status_only=$(echo $waybars | sed "s/.*=//g")
	waybars_status_monitors_list=$(get_waybars_status_monitors_list $waybars_status_only $monitors)
    monitors_on=$(echo $waybars_status_monitors_list | sed "s/.*:off//g" | sed "s/:on//g") # Clearing monitors off
	# Killing every waybars and launching ones that are "on"
	pidof waybar && pkill waybar
    # Launching waybars
	for monitor in $(echo $monitors_on); do
        waybar -c $hyprPath/configs/waybar/waybars/$monitor/config.jsonc -s $hyprPath/configs/waybar/waybars/$monitor/style.css &
    done
	return 0
}



# func : update_workspaces
# desc : function to update workspace.conf so that the main monitor got all the workspaces
# arg1 : the main monitor name
# arg2 : list of monitors
# outp : none
# rtrn : 0 if no error, else 1
update_workspaces()
{
	local main="$1"
	local monitors="$2"
	local main_status
	local main_monitor
	
    echo main=$main
	main_status=$(echo "$main" | sed "s/main(\(.*\))=.*/\1/g")
	main_monitor=$(echo "$main" | sed "s/.*=//g")
	
	# Erasing current workspace configuration and rewriting the new one
	echo "" > "$hyprPath"/configs/hyprland/workspaces.conf
	# Configuration erased. If status is off we leave.
	if [ "$main_status" = "off" ]; then
	    return 0
	fi
	
	for monitor in $(echo "$monitors" | sed "s/,/ /g"); do
		# Is the readen monitor the main one ?
        echo "$monitor = $main_monitor"
		if [ "$monitor" = "$main_monitor" ]; then
            for ((i=1; i<11; i++)); do
            echo yessir
			    echo "workspace = $i, monitor:$monitor" >> "$hyprPath"/configs/hyprland/workspaces.conf
            done
		else
		    echo "workspace = special:$monitor-workspace, monitor:$monitor" >> "$hyprPath"/configs/hyprland/workspaces.conf
		fi
	done
	return 0
}



# func : is_file_valid
# desc : will test if the given file is valid or not
# arg1 : path to the file
# outp : none
# rtrn : 0 if no error, else 1
is_file_valid()
{
    local file="$1"
    if [ ! -f "$file" ]; then
		report_error "ERROR" "is_file_valid" "$file is not a valid file."
		return 1
    fi
    return 0
}



# func : create_configuration
# desc : will create a new configuration in the given config file if the id does not currently exist in the config file
# arg1 : id
# arg2 : path to the config file
# outp : none
# rtrn : 0 if no error, else 1
create_configuration()
{
    local id="$1"
    local configPath="$2"
    local statusList
    local cpt
    local mainMonitor
    local order

    if ! is_file_valid $configPath; then
		report_error "ERROR" "create_configuration" "$configPath is not a valid configuration file."
		return 1
    fi

    # Waybars status list
    statusList=""
    cpt=$(echo "${id}" | sed "s/,/ /g" | wc -w)
    if [ $cpt -eq 0 ]; then
		report_error "ERROR" "create_configuration" "Invalid id '$id'."
		return 1
    fi

    for((i=0; i<cpt; i++))
    do
        statusList=${statusList}on,
    done
    statusList=$(echo $statusList | sed "s/^\(.*\),$/\1/g")
    
    # Main monitor
    mainMonitor=$(echo "$id" | cut -d, -f1) 
    
    # Order
    order=$(echo "${id}" | sed "s/,/:1,/g" | sed "s/\(.*\)/\1:1/")
    
    # Putting the configuration in the config file
    cat << TAG >> "$configPath"
[CONFIGURATION]        
id=${id}
name=${id}-config
order=${order}
waybars(on)=${statusList}
main(on)=${mainMonitor}

TAG

    return 0
}



# func : update
# desc : from the config file and based of plugged monitors will apply the selected configuration settings to the system
# arg1 : path to the config file
# outp : none
# rtrn : 0 if no error, else 1
update()
{
    local configPath="$1"
    local id
    local order
    local main
    local waybars
    
    # Does the given config file exist ?
    if ! is_file_valid $configPath; then
		report_error "ERROR" "update" "$configPath is not a valid configuration file."
		return 1
    fi
    
    if ! id=$(get_plugged_monitors); then
		report_error "ERROR" "update" "Could not retreive the list of plugged monitors."
		return 1
    fi
    
    # Does the current configuration exist ? If not, creating a new one
    if ! grep -q "^id=${id}$" "$configPath"; then
        if ! create_configuration $id $configPath; then
            report_error "ERROR" "update" "Could not create the new configuration with id '$id'."
            return 1
        fi
    fi

	# Removing current [CURRENT]
	sed -i "s/\[CURRENT\]/\[CONFIGURATION\]/g" $configPath
	# Setting new current
	sed -i "/\[CONFIGURATION\]/{N;/id=${id}$/s/\[CONFIGURATION\]/\[CURRENT\]/;}" $configPath

    main=$(current $configPath | tail -n 1)
    waybars=$(current $configPath | tail -n 2 | head -n 1)
    order=$(current $configPath | tail -n 3 | head -n 1)
    echo $main $waybars $order
    update_order "$order"
    update_waybars "$waybars" "$id"
    update_workspaces "$main" "$id"
    return 0
}



# func : list
# desc : list configurations id in the given config file
# arg1 : path to the config file
# outp : configuration id list
# rtrn : 0 if no error, else 1
list()
{
    local configPath="$1"
    if ! is_file_valid $configPath; then
		report_error "ERROR" "list" "$configPath is not a valid configuration file."
		return 1
    fi
    grep "^id=.*$" $configPath | sed "s/id=//g"
    return 0
}



# func : list_verbose
# desc : list configurations in the given config file
# arg1 : path to the config file
# outp : configuration id list
# rtrn : 0 if no error, else 1
list_verbose()
{
    local configPath="$1"
    if ! is_file_valid $configPath; then
		report_error "ERROR" "list_verbose" "$configPath is not a valid configuration file."
		return 1
    fi

    echo
    cat "$configPath" | sed "s/id=/ID = /g" | sed "s/name=/NAME = /g" | sed "s/order=/ORDER = /g" | sed "s/waybars(on)=/WAYBARS(ON) = /g" | sed "s/waybars(off)=/WAYBARS(OFF) = /g" | sed "s/main(on)=/MAIN(ON) = /g" | sed "s/main(off)=/MAIN(OFF) = /g"
    return 0
}



# func : current
# desc : show the configuration in use
# arg1 : path to the config file
# outp : configuration in use
# rtrn : 0 if no error, else 1
current()
{
    local configPath="$1"
    if ! is_file_valid $configPath; then
		report_error "ERROR" "current" "$configPath is not a valid configuration file."
		return 1
    fi
    grep -C 5 "^\[CURRENT]" < $configPath | tail -n 5
    return 0
}



# func : is_int_valid
# desc : will test if the given value is an int or not
# arg1 : given value to test
# outp : none
# rtrn : 0 if no error, else 1
is_int_valid()
{
    local value="$1"
    if [[ -n ${time//[0-9]/} ]]; then
        report_error "ERROR" "is_int_valid" "'$value' is not a valid integer."
        return 1 
    fi
    return 0
}



# func : refresh_waybars_style
# desc : will update waybars border color based on focused app monitor location
# arg1 : the focused monitor name
# outp : none
# rtrn : 0 if no error, else 1
refresh_waybars_style()
{
    local current_focus="$1"
    local activeBorderColor
    local inactiveBorderColor
	activeBorderColor=$(cat "$HOME"/.cache/wal/colors | head -n 8 | tail -n 1 | sed 's/#//g')
	inactiveBorderColor=$(cat "$HOME"/.cache/wal/colors | head -n 2 | tail -n 1 | sed 's/#//g')
	sed -i "s/    border-color:.*/    border-color:#${inactiveBorderColor};/g" "$hyprPath"/configs/waybar/waybars/*/style.css
	sed -i "s/    border-color:.*/    border-color:#${activeBorderColor};/g" "$hyprPath"/configs/waybar/waybars/"$current_focus"/style.css
    return 0
}



# func : get_current_waybars_status
# desc : return the waybars status of the configuration in use
# outp : waybars status
# rtrn : 0 if no error, else 1
get_current_waybars_status()
{
    local configFile="$1"
    if ! conf=$(current $configFile | tail -n 2 | head -n 1); then
        report_error "ERROR" "get_current_waybars_status" "Could not get current configuration."
        return 1 
    fi
    echo $conf
    return 0
}



# func : waybar_daemon
# desc : will launch a daemon that update the waybar border color if it is on the focused app monitor or not
# arg1 : path to the configuration file
# arg2 : time range to check for update
# outp : none
# rtrn : 0 if no error, else 1
waybar_daemon()
{
    local configPath="$1"
    local time="$2"
    local last_monitors
    local current_monitors
    local last_focus
    local current_focus
    local last_status
    local current_status

    # Does the given config file exist ?
    if ! is_file_valid $configPath; then
		report_error "ERROR" "waybar_daemon" "$configPath is not a valid configuration file."
		return 1
    fi
    # Is the given time a valid integer ?
    if ! is_int_valid $time; then
		report_error "ERROR" "waybar_daemon" "The given time value is not valid."
		return 1
    fi
    
    last_monitors=""
    last_focus=""
    last_status=""

    while true; do 
    	# Focused monitor, for waybar recoloring
		current_focus=$(get_focused_app_monitor)
    	if [ ! "$current_focus" = "$last_focus" ]; then
			refresh_waybars_style $current_focus
			last_focus=$current_focus
    	fi

        # If waybars status changed, updating the waybars
        current_status=$(get_current_waybars_status $configPath)
        current_monitors=$(get_plugged_monitors)
    	if [ ! "$current_status" = "$last_status" ]; then
			if ! update_waybars $current_status $current_monitors; then
                report_error "ERROR" "waybar_daemon" "Could not update the waybars configuration."
                return 1
            fi
			last_status=$current_status
            last_monitors=$current_monitors
    	fi

        sleep "$time"
    done
    return 0
}



# func : update_daemon
# desc : will launch a daemon that update automatically if the plugged monitor configuration changes
# arg1 : path to the configuration file
# arg2 : time range to check for update
# outp : none
# rtrn : 0 if no error, else 1
update_daemon()
{
    local configPath="$1"
    local time="$2"

    # Does the given config file exist ?
    if ! is_file_valid $configPath; then
		report_error "ERROR" "update_daemon" "$configPath is not a valid configuration file."
		return 1
    fi
    # Is the given time a valid integer ?
    if ! is_int_valid $time; then
		report_error "ERROR" "update_daemon" "The given time value is not valid."
		return 1
    fi
    
	# Retreiving current loaded configuration
	loaded=$(current $configPath | head -n 1 | sed "s/id=//")

    while true
    do   	
    	current=$(get_plugged_monitors)
		if [ ! "$current" = "$loaded" ]
		then
			update $configPath
			loaded=$current
		fi
        sleep "$time"
    done
    
    return 0
}



# func : launch_option
# desc : test if enough args if is good launch the given option fllowed by given args
# arg1 : required number of arguments for the option to be launched
# arg2 : option to launch
# arg3 : option arguments
# rtrn : 0 if no error, else 1
launch_option()
{
    local required_arg_count="$1"
    local option_name="$2"
    shift 2

    arguments_check "$option_name" $required_arg_count $# || return 1
    if ! $option_name $@; then
        report_error "ERROR" "$option_name $@" "An error occured."
        return 1
    fi
    return 0
}



# func : main
# desc : the core of the script. Will mostly read options and launch appropriate functions
# args : every args given to the script
# outp : none
# rtrn : 0 if no error, else 1
main()
{
    if [ $# -eq 0 ]; then
        report_error "FATAL" "$0" "No given arguments."
        return 1
    fi

	option="$1"
	shift 1
	
	case $option in
		-u|--update) launch_option 1 update $@;;
		-l|--list) launch_option 1 list $@;;
		-v|--list-verbose) launch_option 1 list_verbose $@;;
		-c|--current) launch_option 1 current $@;;		
		-d|--waybar-daemon) launch_option 2 waybar_daemon $@;;		
		--update-daemon) launch_option 2 update_daemon $@;;
		-h|--help) show_help ;;
        *) report_error "ERROR" "$option" "Unknown option. Use --help to see usage." && return 1;;
	esac
    return $?
}



# |======================|
# |======== MAIN ========|
# |======================|
if ! main "$@"; then
    report_error "FATAL" "$0" "An error occurred during $0 execution."
    exit 1
else
    exit 0
fi