#!/bin/bash
#  _                    
# | |    ___   __ _ ___ 
# | |   / _ \ / _` / __|
# | |__| (_) | (_| \__ \
# |_____\___/ \__, |___/
#             |___/     
# by DRAGONO

# logs is a tool to log success and error of launched scripts in a file.
# You can use logs to search a logs file with different criteria such as error, success, time range, etc.
# More infos availables using logs --help

show_help()
{
    echo "Usage: $0 path/to/logfile [option]"
    echo
    echo "Options:"
    echo "  --catch, -c {command} {arg1, ..., argn}    Will catch either error or success and put it in the log file. Will also echo out stdout just like the normal command would do without logs."
    echo "  --read, -r {success|failure}               Will search and print corresponding logs from a log file. "

}



# === Reading Arguments ===
# Logs need at least a log file and an option
if [ $# -lt 2 ]
then
    show_help
    echo "Usage: $1 [option] {args}"
    exit 1
fi

logfile="$1"
shift 1


#Else we can start reading args
while [ $# -gt 0 ]
do
    case $1 in

        --catch|-c)

            # Shift once to delete the arg --cache|-c and only have the commands and its args remaining
	    shift 1

	    # Catching stdout and stderr
            {
                IFS=$'\n' read -r -d '' stderr;
                IFS=$'\n' read -r -d '' stdout;
            } < <((printf '\0%s\0' "$($@)" 1>&2) 2>&1)

	    date=`date +"%m-%d-%Y"`
	    time=`date +"%H:%M:%S"`

            if [ ! "$stderr" = "" ]
	    then
		# First line of the error (may be the only one)
                echo "[✘][$date][$time]: $1: $stderr" >> $logfile
            else
                # No error occured
		echo "[✔][$date][$time]: $1: No error occured. Success." >> $logfile
		echo "$stdout"
	    fi

	    # Success
            exit 0	 

        ;;

        --read|-r)

            # Either everything, success or failures
            shift 1

	    # No search option passed
	    if [ $# -eq 0 ]
            then
		cat $logfile
		exit 0
	    fi

	    # Success
            if [ $1 = "success" ]
	    then
		# Print only success logs
		cat $logfile | grep "[✔]"
		exit 0
	    fi

            # Failure
	    if [ $1 = "failure" ]
	    then
		# Print only failure logs
		cat $logfile | grep -v "^\[✔\].*" | grep -v "^=======.*" | grep -v "^$"
		exit 0
	    fi

	    # Wrong option passed
	    echo "[ERROR]: wrong read option passed. Etheir use nothing, success or failure. You used $1."
	    exit 1     

        ;;

        --new-session|n)
            echo "" >> $logfile
	    echo "" >> $logfile
	    echo "" >> $logfile
	    echo "===========================" >> $logfile
	    echo "=======[NEW SESSION]=======" >> $logfile
	    echo "===========================" >> $logfile
	    exit 0
	;;

        --help|-h)
	    show_help
	    exit 0
        ;;

        *)
            echo "[ERROR]: Unknown option: $1"
            show_help
            exit 1
        ;;

    esac
done
# === End Reading Arguments ===
exit 0
