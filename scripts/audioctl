#!/bin/bash
#                    _ _            _   _ 
#     __ _ _   _  __| (_) ___   ___| |_| |
#    / _` | | | |/ _` | |/ _ \ / __| __| |
#   | (_| | |_| | (_| | | (_) | (__| |_| |
#    \__,_|\__,_|\__,_|_|\___/ \___|\__|_|
# 
# by DRAGONO                                      

# func : show_help
# desc : will display to the user how to use audioctl
# outp : The help message/usage of the script
# rtrn : 0
show_help()
{
    echo
    echo "Usage: $0 [option]" 
    echo "Options:"
    echo
    echo "    -i, --increase [int%] [path/to/alsa/cfg/file]       Increase the volume by the given percentage. The given value must be an integer."
    echo "    -d, --decrease [int%] [path/to/alsa/cfg/file]       Decrease the volume by the given percentage. The given value must be an integer."
    echo "    -t, --toggle [path/to/alsa/cfg/file]       	        Toggle either ON or OFF the volume output."
    echo
    echo "    -s, --setup [absolute/path/to/new/alsa/cfg/file]    To setup the sound on a fresh arch system. Need to be"
    echo "                                                        launched the first time you want to use this script."
    echo
    echo "    -h, --help                                          Show help."
    echo
    echo "Note: --setup requires sudo privileges"
    return 0
}



# func : report_error
# desc : will echo a given message to stderr
# arg1 : the error type : fatal, error, ... This is just and indication and do nothing much.
# arg2 : title of the error, basically where the error occured
# arg3 : the error message
# outp : An error message to stderr
# rtrn : 0
report_error()
{
    local error_type="$1"
    local error_title="$2"
    local error_message="$3"
    >&2 echo "[${error_type}]: ${error_title}: ${error_message}"
    return 0
}



# func : arguments_check
# desc : will check if enough arguments are being given to an option
# arg1 : the option being checked
# arg2 : required number of arguments
# arg3 : current number of arguments
# outp : an error message if there is not enough arguments
# rtrn : 0 if no error, else 1
arguments_check()
{
    local checked_option="$1"
    local required_arg_number="$2"
    local current_arg_number="$3"
    if ((current_arg_number < required_arg_number)); then
        report_error "FATAL" "$checked_option" "Not enough arguments."
        return 1
    fi
    return 0
}



# func : notify_user
# desc : will notify the new volume status to the user
# outp : the notification
# rtrn : 0 if no error, else 1
notify_user()
{
    local muted
    local percentage
    local icon

    if ! dunstctl -h > /dev/null
    then
        echo "Dunst is not installed. Install it if you wish to see sound notifications."
        return 0
    else
        # Mute status, percentage, and icon
        muted=$(get_status) && percentage=$(get_percentage) && icon=$(get_icon)

        # If any of these fail, handle the error.
        if [ -z "$muted" ] || [ -z "$percentage" ] || [ -z "$icon" ]; then
            report_error "ERROR" "Notification" "Failed to retrieve volume status, percentage, or icon."
            return 1
        fi

        # Notifying
        if ! "$hyprPath"/scripts/notifierctl -p "$percentage" -c 20 -t "System" -m "Volume : $percentage% $muted" -u 1 -e 3000 -i "$icon"; then
            report_error "ERROR" "Notification" "Failed to send the notification properly."
            return 1
        fi
        return 0
    fi
}



# func : save_alsa_config
# desc : will save the alsa config to the given config file
# arg1 : path to the config file
# outp : none
# rtrn : 0 if no error, else 1
save_alsa_config()
{
    local alsacfg="$1"
    if [ ! -f "$alsacfg" ]; then
        report_error "ERROR" "save_alsa_config" "$alsacfg is not a valid configuration file."
	    return 1
    fi

    if ! alsactl --file "$alsacfg" store; then
        report_error "ERROR" "save_alsa_config" "Failed to store ALSA configuration."
        return 1
    fi

    return 0
}



# func : get_status
# desc : will check if the volume is toggled on or off
# outp : the volume status, either " " or "(Muted)"
# rtrn : 0 if no error, else 1
get_status()
{
	local status
    if ! status=$(amixer get Master | grep "Left.*%" | cut -d" " -f8 | sed "s/\[\(.*\)\]/\1/"); then
        report_error "ERROR" "get_status" "Could not retreive output mute status."
        return 1
    fi

    if [ "$status" = "on" ]; then
        echo " "
    else
        echo "(Muted)"
    fi
    return 0
}



# func : get_percentage
# desc : will check the current volume percentage
# outp : the volume percentage
# rtrn : 0 if no error, else 1
get_percentage()
{
	local percentage
    if ! percentage=$(amixer get Master | grep "Left.*%" | cut -d" " -f7 | sed "s/\[\(.*\)\%]/\1/"); then
        report_error "ERROR" "get_percentage" "Could not retreive the volume percentage."
        return 1
    fi
    echo "$percentage"
    return 0
}



# func : get_icon
# desc : will check current volume percentage and retreive the associated notification icon
# outp : the path to the icon to use
# rtrn : 0 if no error, else 1
get_icon()
{
	local percentage
	local icon
	
    percentage=$(get_percentage)
    if ((percentage == 0)); then
        icon="$hyprPath/ressources/volume-off.svg"
    elif ((percentage > 0 && percentage < 34)); then
        icon="$hyprPath/ressources/volume-low.svg"
    elif ((percentage > 33 && percentage < 67)); then
        icon="$hyprPath/ressources/volume-medium.svg"
    elif ((percentage > 66)); then
        icon="$hyprPath/ressources/volume-high.svg"
    fi

    if ! identify "$icon" > /dev/null; then
        report_error "ERROR" "get_icon" "Could not retreive the icon at $icon."
        return 1
    fi

    echo "$icon"
    return 0
}



# func : edit_volume
# desc : will either decrease or increase the current volume using alsa
# arg1 : by how much increase/decrease
# arg2 : path to the alsa config file, in order to save the volume configuration after editing it
# arg3 : either "+" to increase or "-" to decrease the volume
# outp : none
# rtrn : 0 if no error, else 1
edit_volume()
{
    local percentage="$1"
    local alsacfg="$2"
    local sign="$3"

    if [[ -n ${percentage//[0-9]/} ]]; then
        report_error "ERROR" "edit_volume" "Invalid volume percentage: '$percentage'. Please provide an integer between 0 and 100."
        return 1 
    fi

    if ((percentage < 0 || percentage > 100)); then
    	report_error "ERROR" "edit_volume" "The percentage ($1) is not valid."
        return 1
    fi

    if ! amixer set Master "$percentage"%"$sign"; then
        report_error "ERROR" "edit_volume" "Could not set new volume."
        return 1
    fi

    if ! save_alsa_config "$alsacfg"; then
    	report_error "ERROR" "edit_volume" "Could not save new alsa config."
        return 1
    fi
    return 0
}



# func : toggle_volume
# desc : will either toggle volume on or off
# arg1 : path to the alsa config file, to save the new volume status
# outp : none
# rtrn : 0 if no error, else 1
toggle_volume()
{
    local alsacfg="$1"
    if ! amixer set Master toggle; then
        report_error "ERROR" "toggle_volume" "Failed to toggle master volume."
        return 1
    fi

    if ! save_alsa_config "$alsacfg"; then
    	report_error "ERROR" "toggle_volume" "Could not save new alsa config."
        return 1
    fi
    return 0
}



# func : setup
# desc : will create a systemd service to load saved volume in the given config file.
# arg1 : path to the alsa config file to use
# outp : none
# rtrn : 0 if no error, else 1
setup()
{
    local alsacfg="$1"
    local cfgPath
    local cfgFile
    
    # Extracting the path and the file name
    cfgPath=$(dirname "$alsacfg")
    cfgFile=$(basename "$alsacfg")

    # Is the path valid
    if [ ! -d "$cfgPath" ]; then
    	report_error "ERROR" "setup" "The path \"$cfgPath\" does not exist, cannot create \"$cfgFile\"."
		return 1
    fi

    # Creating the file
    touch "$alsacfg"

    # Creating a systemd service in order to use Volume.sh --load $alsacfg because it requires sudo and the use dont want to have to sudo everytime he start his session
    sudo tee /etc/systemd/system/load-audio.service > /dev/null << END
[Unit]
Description=Load saved alsa configuration (saved at: $alsacfg)
[Service]
ExecStart=alsactl --file $alsacfg restore
[Install]
WantedBy=multi-user.target
END
    
    # Enabling load-volume.service in order to have the sounds settings restored at startup
    sudo systemctl enable load-audio

    # Done
    return 0
}



# func : launch_option
# desc : test if enough args if is good launch the given option fllowed by given args
# arg1 : required number of arguments for the option to be launched
# arg2 : option to launch
# arg3 : option arguments
# rtrn : 0 if no error, else 1
launch_option()
{
    local required_arg_count="$1"
    local option_name="$2"
    shift 2

    arguments_check "$option_name" $required_arg_count $# || return 1
    if ! $option_name $@; then
        report_error "ERROR" "$option_name $@" "An error occured."
        return 1
    fi
    return 0
}



# func : main
# desc : the core of the script. Will mostly read options and launch appropriate functions
# args : every args given to the script
# outp : none
# rtrn : 0 if no error, else 1
main()
{
    if [ $# -eq 0 ]; then
        report_error "FATAL" "$0" "No given arguments."
        return 1
    fi

    option="$1"
    shift 1

    case $option in
        -i|--increase) launch_option 3 edit_volume $@ + && notify_user;;
        -d|--decrease) launch_option 3 edit_volume $@ - && notify_user;;
        -t|--toggle) launch_option 1 toggle_volume $@ && notify_user;;
        -s|--setup) launch_option 1 setup $@;;
        -h|--help) show_help;;
        *) report_error "ERROR" "$option" "Unknown option. Use --help to see usage." && return 1;;
    esac
    return $?
}



# |======================|
# |======== MAIN ========|
# |======================|
if ! main "$@"; then
    report_error "FATAL" "$0" "An error occurred during $0 execution."
    exit 1
else
    exit 0
fi