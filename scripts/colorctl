#!/bin/bash
# ____   ____ ____ _____           _     
#|  _ \ / ___| __ )_   _|__   ___ | |___ 
#| |_) | |  _|  _ \ | |/ _ \ / _ \| / __|
#|  _ <| |_| | |_) || | (_) | (_) | \__ \
#|_| \_\\____|____/ |_|\___/ \___/|_|___/
#
# by DRAGONO

# RGBTools is a tool to make operation on colors

show_help()
{
    echo "Usage: $0 [option]"
    echo ""
    echo "Options:"
    echo "  --hex-to-rgb {hex value}			Convert an hexadecimal value to RGB. Not mandatory to pass the # before the hex value."
    echo "  --rgb-to-hex {rgb value}    		Convert an RGB value to hexadecimal. "
    echo "  --img-set-color-hex {file} {hex value} 	Take a monochromatic image (the remaining is transparent) and edit the color the the new one."
    echo "  --img-set-color-rgb {file} {rgb value}	Take a monochromatic image (the remaining is transparent) and edit the color the the new one."
    echo "  --img-get-color-hex	{file}			Take a monochromatic image (the remaining is transparent) and print its only color to hexadecimal format."
    echo "  --img-get-color-rgb	{file}			Take a monochromatic image (the remaining is transparent) and print its only color to RGB format."
    echo "  -h, --help  				Show help."
    echo "  IMPORTANT NOTE: RGB values are separated by comma and must be given with comma separator like 255,255,255."
}

file_exist()
{
    # Does the image exist and is valid exist
    if [ ! `identify $1` ]
    then
        echo "FALSE"
    else
        echo "TRUE"
    fi  
}

valid_hex()
{
    local hexvalue="$1"    
    # Now verifying if the hexadecimal value is correct
    echo $hexvalue | grep -qE '^[0-9a-fA-F]{6}$'
    if [ "$?" = "0" ]
    then
        echo "TRUE"
    else
        echo "FALSE"
    fi
}

valid_rgb()
{
    local rgbvalue="$1"
    
    # Do we have 3 values ?
    numbers=`echo $rgbvalue | sed "s/,/ /g" | wc -w`
    if [ ! $numbers -eq 3 ]
    then
        echo "FALSE"
        return 0
    fi
    
    for value in `echo $rgbvalue | sed "s/,/ /g"`
    do
        digits=${#value}
        if [ $digits -gt 3 ]
        then
            echo "FALSE"
            return 0
        fi
        
	if ((value < 0 || value > 255))
	then
	    echo "FALSE"
	    return 0
	fi
    done
    
    # Valid number
    echo "TRUE"
}

hex_to_rgb()
{
    local hexvalue="$1"
    # First we remove the eventual # before the hex value.
    hexvalue=`echo $hexvalue | sed "s/#//"`
    
    if [ "`valid_hex $hexvalue`" = "FALSE" ]
    then
        >&2 echo "[ERROR]: $hexvalue is not a valid hexadecimal value."
        exit 1
    fi
    
    # Conversion
    printf "%d,%d,%d\n" 0x${hexvalue:0:2} 0x${hexvalue:2:2} 0x${hexvalue:4:2}
}

rgb_to_hex()
{
    local rgbvalue="$1"
    if [ "`valid_rgb $rgbvalue`" = "FALSE" ]
    then
        >&2 echo "[ERROR]: $rgbvalue is not a valid RGB value."
        exit 1
    fi
    
    # Conversion
    r=`echo $rgbvalue | cut -d, -f1`
    g=`echo $rgbvalue | cut -d, -f2`
    b=`echo $rgbvalue | cut -d, -f3`
    printf '#%02x%02x%02x\n' $r $g $b
}

img_set_color_hex()
{
    local file="$1"
    local hexvalue="$2"
    
    if [ "`file_exist $file`" = "FALSE" ]
    then
        >&2 echo "[ERROR]: $file is not a valid image."
        exit 1
    fi

    if [ "`valid_hex $hexvalue`" = "FALSE" ]
    then
        >&2 echo "[ERROR]: $hexvalue is not a valid hexadecimal value."
        exit 1
    fi
    
    
}

img_set_color_rgb()
{
    local file="$1"
    local rgbvalue="$2"
    
    # Lets not do this twice lol
    img_set_color_hex $file `rgb_to_hex $rgbvalue`
}

img_get_color_hex()
{
    if [ "`file_exist $file`" = "FALSE" ]
    then
        >&2 echo "[ERROR]: $file is not a valid image."
        exit 1
    fi
}

img_get_color_rgb()
{
    local file="$1"
    
    # Lets not do this twice lol
    hex_to_rgb `img_get_color_hex $file`
}

# === Reading Arguments ===
# Need at least two arguments ([option], [value|file], {value})
if [ $# -lt 2 ]
then
    show_help
    exit 1
fi

# Else we can start reading args
while [ $# -gt 0 ]
do
    case $1 in

        --hex-to-rgb)
	    if test $# -lt 2; then echo "[ERROR]: --hex-to-rgb: not enough arguments."; show_help; exit 1; fi;
            hex_to_rgb $2
	    shift 2	    
        ;;

        --rgb-to-hex)
	    if test $# -lt 2; then echo "[ERROR]: --rgb-to-hex: not enough arguments."; show_help; exit 1; fi;
            rgb_to_hex $2
	    shift 2	    
        ;;

        --img-set-color-hex)
	    if test $# -lt 3; then echo "[ERROR]: --img-set-color-hex: not enough arguments."; show_help; exit 1; fi;
            img_set_color_hex $2 $3
	    shift 3	    
        ;;

        --img-set-color-rgb)
	    if test $# -lt 3; then echo "[ERROR]: --img-set-color-rgb: not enough arguments."; show_help; exit 1; fi;
            img_set_color_rgb $2 $3
	    shift 3	    
        ;;

        --img-get-color-hex)
	    if test $# -lt 3; then echo "[ERROR]: --img-get-color-hex: not enough arguments."; show_help; exit 1; fi;
            img_get_color_hex $2
	    shift 2	    
        ;;

        --img-get-color-rgb)
	    if test $# -lt 3; then echo "[ERROR]: --img-get-color-rgb: not enough arguments."; show_help; exit 1; fi;
            img_get_color_hex $2
	    shift 2	    
        ;;

        --help|-h)
            show_help
            shift 1
        ;;

        *)
            echo "[ERROR]: Unknown option : $1"
            show_help
            exit 1
        ;;

    esac
done

# Done
exit 0
